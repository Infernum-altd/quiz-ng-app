{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helpers/auth-guard.service.ts","webpack:///src/app/_helpers/jwt.interceptor.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/achievements-list/achievements-list.component.ts","webpack:///src/app/dashboard/achievements-list/achievements-list.component.html","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dashboard/rating-list/rating-list.component.ts","webpack:///src/app/dashboard/rating-list/rating-list.component.html","webpack:///src/app/game/game-answer/game-answer.component.ts","webpack:///src/app/game/game-answer/game-answer.component.html","webpack:///src/app/game/game-boolean-answer/game-boolean-answer.component.ts","webpack:///src/app/game/game-boolean-answer/game-boolean-answer.component.html","webpack:///src/app/game/game-finish/game-finish.component.ts","webpack:///src/app/game/game-finish/game-finish.component.html","webpack:///src/app/game/game-optional-answer/game-optional-answer.component.ts","webpack:///src/app/game/game-optional-answer/game-optional-answer.component.html","webpack:///src/app/game/game-question/game-question.component.ts","webpack:///src/app/game/game-question/game-question.component.html","webpack:///src/app/game/game-sequence-answer/game-sequence-answer.component.ts","webpack:///src/app/game/game-sequence-answer/game-sequence-answer.component.html","webpack:///src/app/game/game-settings/game-settings.component.ts","webpack:///src/app/game/game-settings/game-settings.component.html","webpack:///src/app/game/game-start/game-start.component.ts","webpack:///src/app/game/game-start/game-start.component.html","webpack:///src/app/game/game-string-answer/game-string-answer.component.ts","webpack:///src/app/game/game-string-answer/game-string-answer.component.html","webpack:///src/app/image-upload/image-upload.component.ts","webpack:///src/app/image-upload/image-upload.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/models/gender.enum.ts","webpack:///src/app/models/moderator-comment.ts","webpack:///src/app/models/notification-status.enum.ts","webpack:///src/app/models/question.model.ts","webpack:///src/app/models/quiz.model.ts","webpack:///src/app/models/role.enum.ts","webpack:///src/app/models/status-type.enum.ts","webpack:///src/app/navigation/navigation.component.ts","webpack:///src/app/navigation/navigation.component.html","webpack:///src/app/profile/admin-users/admin-users.component.ts","webpack:///src/app/profile/admin-users/admin-users.component.html","webpack:///src/app/profile/change-password/change-password.component.ts","webpack:///src/app/profile/change-password/change-password.component.html","webpack:///src/app/profile/favorite/favorite.component.ts","webpack:///src/app/profile/favorite/favorite.component.html","webpack:///src/app/profile/friends/friends.component.ts","webpack:///src/app/profile/friends/friends.component.html","webpack:///src/app/profile/left-bar/left-bar.component.ts","webpack:///src/app/profile/left-bar/left-bar.component.html","webpack:///src/app/profile/my-quizzes/my-quizzes.component.ts","webpack:///src/app/profile/my-quizzes/my-quizzes.component.html","webpack:///src/app/profile/my-quizzes/reject-messages-dialog/reject-messages-dialog.component.ts","webpack:///src/app/profile/my-quizzes/reject-messages-dialog/reject-messages-dialog.component.html","webpack:///src/app/profile/pending-quizzes/pending-quizzes.component.ts","webpack:///src/app/profile/pending-quizzes/pending-quizzes.component.html","webpack:///src/app/profile/played-game/game-result-dialog/game-result-dialog.component.ts","webpack:///src/app/profile/played-game/game-result-dialog/game-result-dialog.component.html","webpack:///src/app/profile/played-game/played-game.component.ts","webpack:///src/app/profile/played-game/played-game.component.html","webpack:///src/app/profile/profile-navigation/profile-navigation.component.ts","webpack:///src/app/profile/profile-navigation/profile-navigation.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/user-information/user-information.component.ts","webpack:///src/app/profile/user-information/user-information.component.html","webpack:///src/app/quiz-add/add-questions/add-questions.component.ts","webpack:///src/app/quiz-add/add-questions/add-questions.component.html","webpack:///src/app/quiz-add/answer/answer.component.ts","webpack:///src/app/quiz-add/answer/answer.component.html","webpack:///src/app/quiz-add/boolean-answer/boolean-answer.component.ts","webpack:///src/app/quiz-add/boolean-answer/boolean-answer.component.html","webpack:///src/app/quiz-add/new-quiz/new-quiz.component.ts","webpack:///src/app/quiz-add/new-quiz/new-quiz.component.html","webpack:///src/app/quiz-add/optional-answer/optional-answer.component.ts","webpack:///src/app/quiz-add/optional-answer/optional-answer.component.html","webpack:///src/app/quiz-add/question/question.component.ts","webpack:///src/app/quiz-add/question/question.component.html","webpack:///src/app/quiz-add/sequence-answer/sequence-answer.component.ts","webpack:///src/app/quiz-add/sequence-answer/sequence-answer.component.html","webpack:///src/app/quiz-add/string-answer/string-answer.component.ts","webpack:///src/app/quiz-add/string-answer/string-answer.component.html","webpack:///src/app/quiz-add/submitted-quiz/submitted-quiz.component.ts","webpack:///src/app/quiz-add/submitted-quiz/submitted-quiz.component.html","webpack:///src/app/quiz-check/question-check/question-check.component.ts","webpack:///src/app/quiz-check/question-check/question-check.component.html","webpack:///src/app/quiz-check/quiz-check-nav/quiz-check-nav.component.ts","webpack:///src/app/quiz-check/quiz-check-nav/quiz-check-nav.component.html","webpack:///src/app/quiz-check/quiz-check.component.ts","webpack:///src/app/quiz-check/quiz-check.component.html","webpack:///src/app/quiz-check/quiz-info/quiz-info.component.ts","webpack:///src/app/quiz-check/quiz-info/quiz-info.component.html","webpack:///src/app/quiz/quiz-dialog/quiz-dialog.component.ts","webpack:///src/app/quiz/quiz-dialog/quiz-dialog.component.html","webpack:///src/app/quiz/quiz.component.ts","webpack:///src/app/quiz/quiz.component.html","webpack:///src/app/quizzes-page/quizzes-page.component.ts","webpack:///src/app/quizzes-page/quizzes-page.component.html","webpack:///src/app/registration/registration.component.ts","webpack:///src/app/registration/registration.component.html","webpack:///src/app/service/achievementsService/achievements.service.ts","webpack:///src/app/service/announcementService/announcement.service.ts","webpack:///src/app/service/canDeactivateGuardService/can-deactivate-guard.service.ts","webpack:///src/app/service/categoryService/category.service.ts","webpack:///src/app/service/current-user.service.ts","webpack:///src/app/service/dashboardService/dashboard.service.ts","webpack:///src/app/service/gameService/game.service.ts","webpack:///src/app/service/gameStateService/game-state.service.ts","webpack:///src/app/service/imageService/image.service.ts","webpack:///src/app/service/loginService/authentication.service.ts","webpack:///src/app/service/newQuizService/new-quiz.service.ts","webpack:///src/app/service/pendingQuizzesService/pending-quizzes.service.ts","webpack:///src/app/service/profileService/profile.service.ts","webpack:///src/app/service/profileService/share-id.service.ts","webpack:///src/app/service/questionService/question.service.ts","webpack:///src/app/service/quizCheckService/quiz-check.service.ts","webpack:///src/app/service/quizService/quiz.service.ts","webpack:///src/app/service/ratingService/rating.service.ts","webpack:///src/app/service/registrationService/registration.service.ts","webpack:///src/app/set-password/set-password.component.ts","webpack:///src/app/set-password/set-password.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthGuardService","router","authenticationService","route","state","logIn","navigate","providedIn","JwtInterceptor","request","next","localStorage","getItem","handle","resultRequest","clone","headers","append","JSON","parse","token","routes","AppRoutingModule","forRoot","onSameUrlNavigation","imports","AppComponent","title","selector","templateUrl","styleUrls","quizCheckRoutes","path","component","outlet","profileRoutes","appRoutes","canActivate","children","canDeactivate","runGuardsAndResolvers","redirectTo","pathMatch","AppModule","provide","useClass","multi","declarations","providers","bootstrap","entryComponents","AchievementsListComponent","achievementsService","categories","getAchievementCategories","achievements","getAchievementsByUser","userId","DashboardComponent","dashboardService","categoryService","profileService","sanitizer","currentUserService","annoService","ratingIsOpen","achievementIsOpen","maxCards","parseInt","getCurrentUser","imageMap","Map","getCategories","quizCategory","getProfileImage","toString","subscribe","resp","profileImage","text","recentQuizzes","getRecentQuizzes","topQuizzes","getTopQuizzes","recommendationQuizzes","getRecommendations","rating","getRating","achievementsTotal","getAchievementsTotal","achievementsForUser","getAchievementsForUser","getAnnouncement","announcement","ratingNavbar","close","setTimeout","achievementsNavbar","open","value","getTopQuizzesByCategory","quizId","get","set","getQuizImage","pipe","outlets","profilenav","goToProfile","ratingOpen","achievementsOpen","onQuizCategorySelected","RatingListComponent","ratingService","topNumber","range","displayedColumns","topUsers","nearUsers","getRatingRange","GameAnswerComponent","maxAnswerSize","answers","questionId","correct","nextAnswerId","image","changed","deleted","GameBooleanAnswerComponent","options","currentAnswer","option","answer","getEmptyAnswer","GameFinishComponent","gameService","subscribeRating","finishGame","navigateByUrl","quitGame","GameOptionalAnswerComponent","changeDetectionRef","checked","fill","detach","setInterval","reattach","markForCheck","submittedAnswer","forEach","index","push","GameQuestionComponent","activatedRoute","componentFactoryResolver","initialized","navigationSubscription","events","ngOnInit","gameId","snapshot","params","player","history","questionNumber","question","initTime","questionTimer","loadComponent","startTimer","answerHost","titleCasePipe","componentFactory","transform","type","OPTION","resolveComponentFactory","BOOLEAN","ANSWER","SEQUENCE","clear","componentRef","createComponent","instance","answerList","changeDetectorRef","detectChanges","interval","clearInterval","submitAnswer","getSubmittedAnswers","postAnswer","window","confirm","disconnect","read","GameSequenceAnswerComponent","event","previousIndex","currentIndex","drop","GameSettingsComponent","gameSettingsForm","maxUserNumberControl","min","max","questionTimerControl","game","hostId","maxUsersNumber","players","valid","createGame","response","err","console","log","GameStartComponent","userScore","userName","authorize","Date","getMilliseconds","connectToGame","initializeWebSocketConnection","game$","waitGameStart","subscribeQuestion","connect","startGame","GameStringAnswerComponent","stringAnswer","required","ImageSnippet","src","file","ImageUploadComponent","name","imageInput","files","reader","FileReader","addEventListener","selectedFile","target","result","readAsDataURL","processFile","LoginComponent","model","undefined","notificationStatus","about","birthdate","city","countryId","gender","role","surname","email","password","login","Login","Gender","ModeratorComment","moderatorId","comment","commentDate","NotificationStatus","QuestionType","StatusType","Role","authService","NavigationComponent","isOpen","currentUser","username","skipLocationChange","AdminUsersComponent","shareId","regService","formBuilder","Symbol","hasInstance","isCollapsed","submitted","isAdmin","isSuperAdmin","selectedRole","selectedStatus","length","pageSizeOptions","currentUserRole","currentUserStatus","userQuestionUpdate","currentUserId","roleUs","adminCheck","registerForm","group","setPaginationParamDefault","userSearch","getAllAdminUsers","filterRequest","searchByRoleStatus","pageIndex","pageSize","userRequest","userRole","userStatus","getUsersByRoleStatus","adminUsers","responceList","totalNumberOfElement","filterText","getFilteredUsers","status","invalid","input","stringify","ADMIN","MODERATOR","addNewUser","postRegisterInfo","res","alert","error","message","SUPER_ADMIN","getAdminUsers","setEmail","filterValue","dataSource","filter","trim","toLowerCase","deleteAdminUsers","updateActiveStatusUser","controls","setCurrentRole","onPageChanged","setCurrentStatus","ChangePasswordComponent","changePasswordForm","minLength","confirmPassword","validator","MustMatch","newPassword","changePassword","updatePassword","changingPassFormValidation","controlName","matchingControlName","formGroup","control","matchingControl","errors","mustMatch","setErrors","FavoriteComponent","uploadFavoriteQuizzes","filterFavoriteQuizzes","getFavoriteGames","quizzes","$event","choseRequest","filterFavoriteRequest","FriendsComponent","sortDirection","uploadFriends","filterFriends","getFriends","friends","filterFriendsRequest","direction","sortFriends","LeftBarComponent","shareEmail","uploadFile","getNotification","progressImage","changeImg","updateImage","imageUrl","updateNotificationStatus","getUserNotificationStatus","MyQuizzesComponent","dialog","quizService","rejectedSortDirection","rejectedLength","rejectedPageSizeOptions","getUserQuizzes","setPaginationRejectedParamDefault","getUserRejectedQuizzes","filterQuizzes","userQuizzes","filterQuizzesRequest","getRejectedQuizzes","rejectedPageSize","rejectedPageIndex","rejectedQuizzes","choseRejectedRequest","data","quiz","getQuizInfo","sortRejectedQuizzes","onPageRejectedChanged","sortQuizzes","RejectMessagesDialogComponent","dialogRef","getRejectMessages","messages","PendingQuizzesComponent","quizCheckService","selected","setCurrentTable","getAllPendingQuizzes","currentTable","getAssignedQuizzes","getFilteredPendingQuizzes","pendingQuizzes","getPendingQuizzes","assignQuiz","quiznav","setItem","GameResultDialogComponent","getGamesResult","PlayedGameComponent","uploadPlayedGames","getPlayedGames","playedGame","sortPlayedGames","ProfileNavigationComponent","USER","ProfileComponent","activateRoute","subscription","setId","UserInformationComponent","location","floatLabelControl","isEditForm","isModerator","isUser","getProfile","onPopState","saveProfile","updateAdminUser","closeEditForm","profile","updateProfile","assignedQuizzes","unsignQuiz","unsignAllQuiz","AddQuestionsComponent","newQuizService","imageService","questions","getCurrentNavigation","extras","active","i","item","splice","observableBatch","isValid","questionComponents","toArray","el","getData","_","saveImage","postQuiz","addQuestion","onSubmit","AnswerComponent","images","SequenceValidator","formArray","_i","previous","current","mustExist","BooleanAnswerComponent","checkBox","NewQuizComponent","visible","selectable","removable","addOnBlur","separatorKeysCodes","tags","author","category_id","date","toISOString","description","PENDING","modification_time","loadCategories","quizForm","maxLength","category","find","element","fruit","indexOf","getCategory","setValue","saveQuiz","toUpperCase","imageComponent","add","OptionalAnswerComponent","maxAnswer","minRequired","answerForm","items","array","correctControl","textControl","setValidators","isCorrect","markAsTouched","getImages","at","dirty","newText","saveImages","imageComponents","QuestionComponent","questionService","send","questionTypes","Object","questionForm","onOptionSelected","SequenceAnswerComponent","formControl","StringAnswerComponent","SubmittedQuizComponent","QuestionCheckComponent","checkedQuestions","labelPosition","getQuiz","commentForm","getQuizById","currentQuizId","unsignModeratorQuiz","updateStatusQuiz","ACTIVE","includes","com","addComment","leaveComment","QuizCheckNavComponent","currentQuiz","QuizCheckComponent","QuizInfoComponent","getCommentHistory","comments","getQuizInfoById","QuizDialogComponent","isLogin","quizData","QuizComponent","quizImage","bypassSecurityTrustResourceUrl","markQuizAsFavorite","favorite","unmarkQuizAsFavorite","width","openDialog","QuizzesPageComponent","recommendationLimit","getAllQuizzes","getRecommendationForAuthUser","getRecommendationForAnonimus","getFilteredQuizzes","currentQuizCategory","searchByCategory","getQuizzes","categoryid","getQuizzesByCategory","categoryId","getRecommendedQuizzes","RecommendationForAnonimus","RegistrationComponent","service","NOT_MENTIONED","register","AchievementsService","http","BASE_URL","GET_ACHIEVEMENTS","GET_ACHIEVEMENT_CATEGORIES","GET_ACHIEVEMENTS_BY_CATEGORY","AnnouncementService","GET_ANNOUNCEMENT","CanDeactivateGuardService","currentRoute","currentState","nextState","url","CategoryService","CATEGORIES_URL","CurrentUserService","DashboardService","TOP_QUIZZES","RECENT_QUIZZES","GET_RATING","GET_ACHIEVEMENTS_TOTAL","GET_ACHIEVEMENTS_FOR_USER","GET_RECOMMENDATIONS","GET_QUIZ_IMAGE","limit","GameService","gameStateService","CREATE_GAME","webSocketEndPoint","post","that","config","webSocketFactory","client","configure","setGameState","gameObservable","watch","body","activate","publish","destination","routeQuestion","getGameState","routeResults","link","deleteGame","deactivate","GameStateService","sessionStorage","String","removeItem","ImageService","SAVE_IMAGE","uploadImg","FormData","responseType","AuthenticationService","LOGIN_API_URL","USER_BY_CODE_URL","SET_PASSWORD_URL","replace","NewQuizService","NEW_QUIZ_URL","QUIZZES_INFO","PendingQuizzesService","PENDING_QUIZZES_URL","ASSIGNED_QUIZZES_URL","GET_FILTERED_PENDING_QUIZZES_URL","searchText","ProfileService","PROFILE_URL","FRIEND_LIST_URL","ADMIN_USERS_LIST_URL","UPDATE_PROFILE_URL","UPDATE_PASSWORD_URL","UPDATE_ACTIVE_STATUS_URL","GET_QUIZZES_URL","GET_FAVORITE_URL","GET_CATEGORY_NAME","UPDATE_USER_IMAGE","GET_USER_IMAGE_BY_USER_ID","UPDATE_GET_NOTIFICATION","GET_PLAYED_GAMES","GET_GAME_RESULT","DELETE_ADMIN_URL","GET_FILTERED_USERS","GET_USERS_BY_ROLE","ADD_ADMIN_USER_URL","GET_REJECTED_QUIZZES","GET_REJECTED_MESSAGES","user","pageNumber","ShareIdService","QuestionService","UPDATE_QUESTION_IMAGE","GET_QUESTIONS","QuizCheckModel","QuizCheckService","QUIZZES_URL","UPDATE_QUIZ_STATUS_URL","ADD_MODERATOR_COMMENT_URL","ASSIGN_QUIZ","UNSIGN_QUIZ_URL","GET_COMMENTS_URL","QUIZZES_INFO_URL","QuizService","GET_QUIZ_BY_CATEGORY","GET_FILTERED_QUIZ","MARK_QUIZ_AS_FAVORITE","UNMARK_QUIZ_AS_FAVORITE","GET_RECOMMENDED_QUIZZES","GET_POPULAR_QUIZZES","UNSIGN_ALL_MODERATOR_QUIZ_URL","searcText","RatingService","GET_RATING_IN_RANGE","from","to","RegistrationService","REGISTRATION_URL","SetPasswordComponent","paramMap","getAll","logout","getUser","setPassword","getUserbyCode","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\r\nimport {AuthenticationService} from '../service/loginService/authentication.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuardService implements CanActivate{\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) { }\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (this.authenticationService.logIn){\r\n      return true;\r\n    }\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor() {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (localStorage.getItem('currentUser') == null){\r\n      return next.handle(request);\r\n    }\r\n\r\n    const resultRequest = request.clone({\r\n      headers: request.headers.append('authorization', `${JSON.parse(localStorage.getItem('currentUser')).token}`)});\r\n    return next.handle(resultRequest);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n   imports: [\r\n      RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })\r\n   ],\r\n   exports: [\r\n      RouterModule\r\n   ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'quiz-ng-app';\r\n\r\n  constructor() {}\r\n}\r\n","<div>\r\n  <app-navigation></app-navigation>\r\n  <router-outlet></router-outlet>\r\n</div>","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { QuizComponent } from './quiz/quiz.component';\r\nimport { AdminUsersComponent } from './profile/admin-users/admin-users.component';\r\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { PendingQuizzesComponent } from './profile/pending-quizzes/pending-quizzes.component';\r\nimport { QuizCheckComponent } from './quiz-check/quiz-check.component';\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport { MatExpansionModule } from '@angular/material/expansion'\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { SubmittedQuizComponent } from './quiz-add/submitted-quiz/submitted-quiz.component';\r\nimport { FlexModule } from \"@angular/flex-layout\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { QuizDialogComponent } from './quiz/quiz-dialog/quiz-dialog.component';\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\n\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\n\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { AchievementsListComponent } from './dashboard/achievements-list/achievements-list.component';\r\nimport { RatingListComponent } from './dashboard/rating-list/rating-list.component';\r\nimport { QuizzesPageComponent } from \"./quizzes-page/quizzes-page.component\";\r\nimport { GameQuestionComponent } from './game/game-question/game-question.component';\r\nimport { GameAnswerComponent } from './game/game-answer/game-answer.component';\r\nimport { GameOptionalAnswerComponent } from './game/game-optional-answer/game-optional-answer.component';\r\nimport { GameSequenceAnswerComponent } from './game/game-sequence-answer/game-sequence-answer.component';\r\nimport { GameStringAnswerComponent } from './game/game-string-answer/game-string-answer.component';\r\nimport { GameBooleanAnswerComponent } from './game/game-boolean-answer/game-boolean-answer.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { GameStartComponent } from './game/game-start/game-start.component';\r\nimport { GameSettingsComponent } from './game/game-settings/game-settings.component';\r\nimport { GameFinishComponent } from './game/game-finish/game-finish.component';\r\nimport {QuizInfoComponent} from \"./quiz-check/quiz-info/quiz-info.component\";\r\nimport {QuestionCheckComponent} from \"./quiz-check/question-check/question-check.component\";\r\nimport {QuizCheckNavComponent} from \"./quiz-check/quiz-check-nav/quiz-check-nav.component\";\r\nimport { SetPasswordComponent } from './set-password/set-password.component';\r\nimport { PlayedGameComponent } from './profile/played-game/played-game.component';\r\nimport { GameResultDialogComponent } from './profile/played-game/game-result-dialog/game-result-dialog.component';\r\nimport {InfiniteScrollModule} from \"ngx-infinite-scroll\";\r\nimport {CanDeactivateGuardService} from \"./service/canDeactivateGuardService/can-deactivate-guard.service\";\r\nimport {MatBadgeModule} from \"@angular/material/badge\";\r\nimport { RejectMessagesDialogComponent } from './profile/my-quizzes/reject-messages-dialog/reject-messages-dialog.component';\r\nimport {UserInformationComponent} from \"./profile/user-information/user-information.component\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {FriendsComponent} from \"./profile/friends/friends.component\";\r\nimport {MyQuizzesComponent} from \"./profile/my-quizzes/my-quizzes.component\";\r\nimport {FavoriteComponent} from \"./profile/favorite/favorite.component\";\r\nimport {ChangePasswordComponent} from \"./profile/change-password/change-password.component\";\r\nimport {RegistrationComponent} from \"./registration/registration.component\";\r\nimport {LoginComponent} from \"./login/login.component\";\r\nimport {AuthGuardService} from \"./_helpers/auth-guard.service\";\r\nimport {ProfileComponent} from \"./profile/profile.component\";\r\nimport {QuestionComponent} from \"./quiz-add/question/question.component\";\r\nimport {NewQuizComponent} from \"./quiz-add/new-quiz/new-quiz.component\";\r\nimport {AddQuestionsComponent} from \"./quiz-add/add-questions/add-questions.component\";\r\nimport {NavigationComponent} from \"./navigation/navigation.component\";\r\nimport {ProfileNavigationComponent} from \"./profile/profile-navigation/profile-navigation.component\";\r\nimport {LeftBarComponent} from \"./profile/left-bar/left-bar.component\";\r\nimport {OptionalAnswerComponent} from \"./quiz-add/optional-answer/optional-answer.component\";\r\nimport {BooleanAnswerComponent} from \"./quiz-add/boolean-answer/boolean-answer.component\";\r\nimport {StringAnswerComponent} from \"./quiz-add/string-answer/string-answer.component\";\r\nimport {AnswerComponent} from \"./quiz-add/answer/answer.component\";\r\nimport {ImageUploadComponent} from \"./image-upload/image-upload.component\";\r\nimport {SequenceAnswerComponent} from \"./quiz-add/sequence-answer/sequence-answer.component\";\r\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\r\nimport {JwtInterceptor} from \"./_helpers/jwt.interceptor\";\r\n\r\n\r\n\r\nconst quizCheckRoutes: Routes = [\r\n  {\r\n    path: 'quizinfo',\r\n    component: QuizInfoComponent,\r\n    outlet: 'quiznav'\r\n  },\r\n  {\r\n    path: 'qAnda',\r\n    component: QuestionCheckComponent,\r\n    outlet: 'quiznav'\r\n  }\r\n];\r\n\r\nconst profileRoutes: Routes = [\r\n  {\r\n    path: 'profinfo',\r\n    component: UserInformationComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'adminUsers',\r\n    component: AdminUsersComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'pendingQuizzes',\r\n    component: PendingQuizzesComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'friends',\r\n    component: FriendsComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'mygames',\r\n    component: MyQuizzesComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'favorite',\r\n    component: FavoriteComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'changePass',\r\n    component: ChangePasswordComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'played',\r\n    component: PlayedGameComponent,\r\n    outlet: 'profilenav'\r\n  }\r\n];\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: 'registration',\r\n    component: RegistrationComponent\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'profile/:id', canActivate: [AuthGuardService],\r\n    component: ProfileComponent,\r\n    children: profileRoutes,\r\n  },\r\n  {\r\n    path: 'friends', canActivate: [AuthGuardService],\r\n    component: FriendsComponent\r\n  },\r\n  {\r\n    path: 'quizzes/:id',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'quiz',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'friends', canActivate: [AuthGuardService],\r\n    component: FriendsComponent\r\n  },\r\n  {\r\n    path: 'quizzes/:id',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'question',\r\n    component: QuestionComponent\r\n  },\r\n  {\r\n    path: 'new_quiz',\r\n    component: NewQuizComponent\r\n  },\r\n  {\r\n    path: 'add_questions',\r\n    component: AddQuestionsComponent\r\n  },\r\n  {\r\n    path: 'submitted_quiz',\r\n    component: SubmittedQuizComponent\r\n  },\r\n  {\r\n    path: 'quizzes',\r\n    component: QuizzesPageComponent\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    component: DashboardComponent\r\n  },\r\n  {\r\n    path: 'pendingQuizzes', canActivate: [AuthGuardService],\r\n    component: PendingQuizzesComponent\r\n  },\r\n  {\r\n    path: 'game/question/:gameId/:questionNumber',\r\n    component: GameQuestionComponent,\r\n    canDeactivate: [CanDeactivateGuardService],\r\n    runGuardsAndResolvers: 'always',\r\n  },\r\n  {\r\n    path: 'game/settings/:quizId',\r\n    component: GameSettingsComponent\r\n  },\r\n  {\r\n    path: 'game/start/:gameId',\r\n    component: GameStartComponent,\r\n    canDeactivate: [CanDeactivateGuardService]\r\n  },\r\n  {\r\n    path: 'game/finish/:gameId',\r\n    component: GameFinishComponent\r\n  },\r\n  {\r\n    path: 'pendingQuizzes', canActivate: [AuthGuardService],\r\n    component: PendingQuizzesComponent\r\n  },\r\n  {\r\n    path: 'checkquiz/:id', canActivate: [AuthGuardService],\r\n    component: QuizCheckComponent,\r\n    children: quizCheckRoutes,\r\n  },\r\n  {\r\n    path: 'adminUsers', canActivate: [AuthGuardService],\r\n    component: AdminUsersComponent\r\n  },\r\n  {\r\n    path: 'activate/:code',\r\n    component: SetPasswordComponent\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/quizzes',\r\n    pathMatch: 'full',\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent,\r\n    LoginComponent,\r\n    NavigationComponent,\r\n    ProfileComponent,\r\n    ProfileNavigationComponent,\r\n    LeftBarComponent,\r\n    UserInformationComponent,\r\n    FriendsComponent,\r\n    MyQuizzesComponent,\r\n    FavoriteComponent,\r\n    ChangePasswordComponent,\r\n    QuizComponent,\r\n    QuestionComponent,\r\n    OptionalAnswerComponent,\r\n    BooleanAnswerComponent,\r\n    StringAnswerComponent,\r\n    SequenceAnswerComponent,\r\n    ImageUploadComponent,\r\n    AnswerComponent,\r\n    NewQuizComponent,\r\n    AddQuestionsComponent,\r\n    SubmittedQuizComponent,\r\n    QuizzesPageComponent,\r\n    QuizDialogComponent,\r\n    AddQuestionsComponent,\r\n    DashboardComponent,\r\n    AchievementsListComponent,\r\n    RatingListComponent,\r\n    GameQuestionComponent,\r\n    GameAnswerComponent,\r\n    GameOptionalAnswerComponent,\r\n    GameSequenceAnswerComponent,\r\n    GameStringAnswerComponent,\r\n    GameBooleanAnswerComponent,\r\n    GameStartComponent,\r\n    GameSettingsComponent,\r\n    GameFinishComponent,\r\n    AdminUsersComponent,\r\n    PendingQuizzesComponent,\r\n    QuizCheckComponent,\r\n    QuestionCheckComponent,\r\n    QuizInfoComponent,\r\n    QuizCheckNavComponent,\r\n    SetPasswordComponent,\r\n    PlayedGameComponent,\r\n    GameResultDialogComponent,\r\n    RatingListComponent,\r\n    AdminUsersComponent,\r\n    PendingQuizzesComponent,\r\n    QuizCheckComponent,\r\n    QuestionCheckComponent,\r\n    QuizInfoComponent,\r\n    QuizCheckNavComponent,\r\n    RejectMessagesDialogComponent\r\n  ],\r\n    imports: [\r\n        NgbModule,\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        HttpClientModule,\r\n        FormsModule,\r\n        RouterModule.forRoot(appRoutes),\r\n        ReactiveFormsModule,\r\n        BrowserAnimationsModule,\r\n        MatTableModule,\r\n        MatInputModule,\r\n        MatPaginatorModule,\r\n        FlexModule,\r\n        MatToolbarModule,\r\n        MatButtonModule,\r\n        MatSortModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatRadioModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatGridListModule,\r\n        MatFormFieldModule,\r\n        MatChipsModule,\r\n        MatExpansionModule,\r\n        MatDividerModule,\r\n        MatCheckboxModule,\r\n        MatProgressSpinnerModule,\r\n        LayoutModule,\r\n        FlexLayoutModule,\r\n        MatSidenavModule,\r\n        MatListModule,\r\n        MatTabsModule,\r\n        MatButtonToggleModule,\r\n        MatSnackBarModule,\r\n        MatDialogModule,\r\n        DragDropModule,\r\n        LayoutModule,\r\n        FlexLayoutModule,\r\n        MatProgressBarModule,\r\n        InfiniteScrollModule,\r\n        MatBadgeModule\r\n    ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true }\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [OptionalAnswerComponent, BooleanAnswerComponent, StringAnswerComponent, SequenceAnswerComponent],\r\n})\r\nexport class AppModule {\r\n}\r\n","import { Achievement } from './../../models/achievement.model';\r\nimport { AchievementsService } from '../../service/achievementsService/achievements.service';\r\nimport { Category } from './../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-achievements-list',\r\n  templateUrl: './achievements-list.component.html',\r\n  styleUrls: ['./achievements-list.component.css']\r\n})\r\nexport class AchievementsListComponent implements OnInit {\r\n  @Input('userId') userId: number;\r\n\r\n  categories: Observable<Category[]>;\r\n  achievements: Observable<Achievement[]>;\r\n\r\n  constructor(private achievementsService: AchievementsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.categories = this.achievementsService.getAchievementCategories();\r\n    this.achievements = this.achievementsService.getAchievementsByUser(this.userId);\r\n  }\r\n}\r\n","<mat-list *ngFor=\"let category of categories | async\" autosize>\r\n    <div mat-subheader>{{category.name | titlecase}}</div>\r\n    <div *ngFor=\"let achievement of achievements | async\">\r\n        <mat-list-item *ngIf=\"achievement.categoryId==category.id\">\r\n            <mat-icon mat-list-icon>star</mat-icon>\r\n            <div mat-line>{{achievement.name}}</div>\r\n            <div mat-line>{{achievement.description}}</div>\r\n            <div mat-line>\r\n                <mat-progress-bar mode=\"determinate\" [value]=\"achievement.progress\">\r\n                </mat-progress-bar>\r\n            </div>\r\n        </mat-list-item>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n</mat-list>","import {DomSanitizer} from '@angular/platform-browser';\r\nimport {ProfileService} from './../service/profileService/profile.service';\r\nimport {Observable} from 'rxjs';\r\nimport {CategoryService} from './../service/categoryService/category.service';\r\nimport {DashboardService} from './../service/dashboardService/dashboard.service';\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {Quiz} from '../models/quiz.model';\r\nimport {Category} from '../models/category.model';\r\nimport {MatSidenav} from '@angular/material/sidenav';\r\nimport {map} from 'rxjs/operators'\r\nimport {CurrentUserService} from \"../service/current-user.service\";\r\nimport {Announcement} from \"../models/announcement\";\r\nimport {AnnouncementService} from \"../service/announcementService/announcement.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  @ViewChild('ratingNavbar') ratingNavbar: MatSidenav;\r\n  @ViewChild('achievementsNavbar') achievementsNavbar: MatSidenav;\r\n\r\n  ratingIsOpen: boolean = false;\r\n  achievementIsOpen: boolean = false;\r\n\r\n\r\n  maxCards: number = 5;\r\n  userId: number = parseInt(this.currentUserService.getCurrentUser().id);\r\n\r\n  profileImage: Observable<any>;\r\n\r\n  recentQuizzes: Observable<Quiz[]>;\r\n  topQuizzes: Observable<Quiz[]>;\r\n  recommendationQuizzes: Observable<Quiz[]>;\r\n\r\n  imageMap = new Map<number, Observable<any>>();\r\n\r\n  categories: Observable<Category[]> = this.categoryService.getCategories();\r\n  quizCategory: number = -1;\r\n\r\n  rating: Observable<number>;\r\n\r\n  achievementsTotal: Observable<number>;\r\n  achievementsForUser: Observable<number>;\r\n\r\n  announcement: Announcement[];\r\n\r\n  constructor(private dashboardService: DashboardService,\r\n              private categoryService: CategoryService,\r\n              private profileService: ProfileService,\r\n              private sanitizer: DomSanitizer,\r\n              public currentUserService: CurrentUserService,\r\n              private annoService: AnnouncementService,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.profileService.getProfileImage(this.userId.toString()).subscribe(\r\n      (resp => this.profileImage = resp.text)\r\n    );\r\n\r\n    this.recentQuizzes = this.dashboardService.getRecentQuizzes(this.userId, this.maxCards);\r\n\r\n    this.topQuizzes = this.dashboardService.getTopQuizzes(this.maxCards);\r\n\r\n    this.recommendationQuizzes = this.dashboardService.getRecommendations(this.userId, this.maxCards);\r\n\r\n    this.rating = this.dashboardService.getRating(this.userId);\r\n\r\n    this.achievementsTotal = this.dashboardService.getAchievementsTotal();\r\n    this.achievementsForUser = this.dashboardService.getAchievementsForUser(this.userId);\r\n\r\n    this.annoService.getAnnouncement().subscribe(\r\n      resp => this.announcement = resp\r\n    );\r\n  }\r\n\r\n  achievementsOpen(): void {\r\n    if (this.ratingIsOpen) {\r\n      this.ratingNavbar.close();\r\n      this.ratingIsOpen = false;\r\n    }\r\n\r\n    this.achievementIsOpen = true;\r\n    setTimeout(() => {\r\n      this.achievementsNavbar.open();\r\n    }, 0);\r\n\r\n  }\r\n\r\n  ratingOpen(): void {\r\n    if (this.achievementIsOpen) {\r\n      this.achievementsNavbar.close();\r\n      this.achievementIsOpen = false;\r\n    }\r\n\r\n    this.ratingIsOpen = true;\r\n    setTimeout(() => {\r\n      this.ratingNavbar.open();\r\n    }, 0);\r\n  }\r\n\r\n  achievementsClose(): void {\r\n    this.achievementsNavbar.close();\r\n    this.achievementIsOpen = false;\r\n  }\r\n\r\n  ratingClose(): void {\r\n    this.ratingNavbar.close();\r\n    this.ratingIsOpen = false;\r\n  }\r\n\r\n  closeAll(): void {\r\n    if (this.ratingIsOpen) {\r\n      this.ratingNavbar.close();\r\n    }\r\n    if (this.achievementIsOpen) {\r\n      this.achievementsNavbar.close();\r\n    }\r\n  }\r\n\r\n  onQuizCategorySelected(value: number): void {\r\n    if (value === -1) {\r\n      this.topQuizzes = this.dashboardService.getTopQuizzes(this.maxCards);\r\n    } else {\r\n      this.topQuizzes = this.dashboardService.getTopQuizzesByCategory(value, this.maxCards);\r\n    }\r\n  }\r\n\r\n  getQuizImage(quizId: number): Observable<any> {\r\n    if (!this.imageMap.get(quizId)) {\r\n      this.imageMap.set(quizId, this.dashboardService.getQuizImage(quizId).pipe(\r\n        map(resp => resp.text)));\r\n    }\r\n    return this.imageMap.get(quizId);\r\n  }\r\n\r\n  goToProfile() {\r\n    this.router.navigate(['profile', this.currentUserService.getCurrentUser().id, {outlets: {profilenav: 'profinfo'}}]);\r\n  }\r\n}\r\n","<mat-drawer-container class=\"achievement-container\">\r\n\r\n  <mat-drawer #ratingNavbar (backdropClick)=\"ratingClose()\" (keydown.escape)=\"ratingClose()\" mode=\"side\"\r\n              *ngIf=\"ratingIsOpen\" position=\"end\">\r\n    <p>\r\n      <button mat-flat-button (click)=\"ratingClose()\" color=\"accent\">Close</button>\r\n    </p>\r\n    <app-rating-list [userId]=\"userId\" [ratingPos]=\"rating\"></app-rating-list>\r\n  </mat-drawer>\r\n\r\n  <mat-drawer #achievementsNavbar (backdropClick)=\" achievementsClose()\" (keydown.escape)=\"achievementsClose()\"\r\n              mode=\"side\" *ngIf=\"achievementIsOpen\" position=\"end\">\r\n    <p>\r\n      <button mat-flat-button (click)=\"achievementsClose()\" color=\"accent\">Close</button>\r\n    </p>\r\n    <app-achievements-list [userId]=\"userId\"></app-achievements-list>\r\n  </mat-drawer>\r\n\r\n  <mat-drawer-content>\r\n    <div class=\"background\" fxLayout.gt-sm=\"row\" fxLayout.gt-xs=\"column\" fxLayoutWrap fxLayoutGap=\"3rem\"\r\n         fxLayoutAlign=\"center\">\r\n      <div fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"starts\">\r\n        <h2>Progress</h2>\r\n\r\n        <mat-card id=\"profile-card\">\r\n          <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"space-around\">\r\n            <img mat-card-image id=\"profile-img\" [src]=\"profileImage\"\r\n                 alt=\"Profile image\" fxFlexAlign=\"end\">\r\n          </mat-card-content>\r\n          <mat-card-actions fxLayoutAlign=\"space-around\">\r\n            <button mat-raised-button id=\"profile-button\" class=\"text\" fxFlexAlign=\"end\" color=\"accent\"\r\n                    (click)=\"goToProfile()\">\r\n              Go to\r\n              Profile\r\n            </button>\r\n          </mat-card-actions>\r\n        </mat-card>\r\n        <mat-card id=\"rating-card\" (click)=\"ratingOpen()\">\r\n          <div>\r\n            <h2 class=\"text\">{{rating |async}}<sup>TH</sup></h2>\r\n          </div>\r\n          <mat-card-footer class=\"rating\">\r\n            <h3>Rating</h3>\r\n          </mat-card-footer>\r\n        </mat-card>\r\n        <mat-card id=\"achievement-card\" (click)=\"achievementsOpen()\">\r\n          <div>\r\n            <h2 class=\"text\">{{achievementsForUser |async}} / {{achievementsTotal |async}}</h2>\r\n          </div>\r\n          <mat-card-footer class=\"rating\">\r\n            <h3>Achievements</h3>\r\n          </mat-card-footer>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n        <h2>Recent activity</h2>\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of recentQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n                 onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n                 alt=\"Game image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n          <h3 *ngIf=\"(recentQuizzes |async)==null\">No recent activity</h3>\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between\">\r\n          <h2>Top quizzes</h2>\r\n\r\n          <mat-form-field>\r\n            <mat-label>Select category</mat-label>\r\n            <mat-select [(value)]=\"quizCategory\" (selectionChange)=\"onQuizCategorySelected($event.value)\">\r\n              <mat-option [value]=\"-1\">View all</mat-option>\r\n              <mat-option *ngFor='let category of categories |async' [value]=\"category.id\">\r\n                {{category.name}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of topQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n                 onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n                 alt=\"Quiz image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n\r\n        <h2>Recommendations</h2>\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of recommendationQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n                 onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n                 alt=\"Quiz image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n          <h3 *ngIf=\"(recommendationQuizzes |async)==null\">Play some games to get recommendations</h3>\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between\">\r\n          <h2>Announcements</h2>\r\n        </div>\r\n\r\n        <div id=\"announcements-block\">\r\n\r\n          <div class=\"announcements-list\" fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"center\">\r\n            <div *ngFor=\"let annon of announcement\">\r\n              <mat-card style=\"border: 2px solid #ff0000\" *ngIf=\"!annon.generated; else elseBlock\">\r\n                <mat-card-header>\r\n                  <mat-card-title>{{annon.date | date:'shortTime'}} </mat-card-title>\r\n                  <mat-card-subtitle>{{annon.date | date}}<br>Administrator announcement</mat-card-subtitle>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                  <p>\r\n                    {{annon.text}}\r\n                  </p>\r\n                </mat-card-content>\r\n              </mat-card>\r\n              <ng-template #elseBlock>\r\n                <mat-card style=\"border: 2px solid #008000\">\r\n                  <mat-card-header>\r\n                    <mat-card-title>{{annon.date | date:'shortTime'}}</mat-card-title>\r\n                    <mat-card-subtitle>{{annon.date | date}}<br>Friends activities</mat-card-subtitle>\r\n                  </mat-card-header>\r\n                  <mat-card-content>\r\n                    <p>\r\n                      {{annon.text}}\r\n                    </p>\r\n                  </mat-card-content>\r\n                </mat-card>\r\n              </ng-template>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  </mat-drawer-content>\r\n\r\n</mat-drawer-container>\r\n","import { Observable } from 'rxjs';\r\nimport { RatingService } from './../../service/ratingService/rating.service';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Component({\r\n  selector: 'app-rating-list',\r\n  templateUrl: './rating-list.component.html',\r\n  styleUrls: ['./rating-list.component.css']\r\n})\r\nexport class RatingListComponent implements OnInit {\r\n  @Input('userId') userId: number;\r\n  @Input('ratingPos') ratingPos: Observable<number>;\r\n\r\n  topNumber: number = 3;\r\n  range: number = 2;\r\n  topUsers: Observable<User[]>\r\n  nearUsers: Observable<User[]>;\r\n  displayedColumns: string[] = ['position', 'name', 'surname', 'rating'];\r\n\r\n\r\n  constructor(private ratingService: RatingService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.topUsers = this.ratingService.getRating(0, this.topNumber);\r\n    this.nearUsers = this.ratingService.getRatingRange(this.userId, this.range);\r\n  }\r\n\r\n}\r\n","<div>\r\n    <table mat-table matColumnDef=\"position\" [dataSource]=\"topUsers | async\">\r\n        class=\"mat-elevation-z8\">\r\n        <ng-container matColumnDef=\"position\">\r\n            <div *matHeaderCellDef>No.</div>\r\n            <div *matCellDef=\"let user; let i=index\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">{{i+1}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n            <div *matHeaderCellDef>Name</div>\r\n            <div *matCellDef=\"let user\">{{user.name}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"surname\">\r\n            <div *matHeaderCellDef>Surname</div>\r\n            <div class=\"description-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">\r\n                {{user.surname}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"rating\">\r\n            <div *matHeaderCellDef>Rating</div>\r\n            <div class=\"duration-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">\r\n                {{user.rating}}</div>\r\n        </ng-container>\r\n\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\r\n    </table>\r\n\r\n    <mat-icon mat-list-icon *ngIf=\"((ratingPos|async)-range)>=topNumber\">more_horiz</mat-icon>\r\n\r\n\r\n    <table mat-table matColumnDef=\" position\" [dataSource]=\"nearUsers | async\">\r\n        class=\"mat-elevation-z8\">\r\n\r\n        <ng-container matColumnDef=\"position\">\r\n            <div *matCellDef=\"let user; let i=index\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{i+(ratingPos|async)-range+1}}\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n            <div *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">{{user.name}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"surname\">\r\n            <div class=\"description-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{user.surname}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"rating\">\r\n            <div class=\"duration-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{user.rating}}</div>\r\n        </ng-container>\r\n\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"\r\n            [class.hidden]=\"(i+(ratingPos|async)-range)<=topNumber\">\r\n        </mat-row>\r\n    </table>\r\n</div>","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n@Component({\r\n  selector: 'app-game-answer',\r\n  templateUrl: './game-answer.component.html',\r\n  styleUrls: ['./game-answer.component.css']\r\n})\r\nexport class GameAnswerComponent implements OnInit {\r\n  maxAnswerSize: number = 4;\r\n  @Input() answers: Answer[] = [];\r\n  @Input() questionId: number;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getSubmittedAnswers(): Answer[] {\r\n    return [];\r\n  }\r\n\r\n  getEmptyAnswer(): Answer {\r\n    return {\r\n      id: null,\r\n      questionId: null,\r\n      text: null,\r\n      correct: null,\r\n      nextAnswerId: null,\r\n      image: null,\r\n      changed: false,\r\n      deleted: false\r\n    };\r\n  }\r\n}\r\n","<p>game-answer works!</p>\r\n","import { GameAnswerComponent } from './../game-answer/game-answer.component';\r\nimport { Component } from '@angular/core';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n\r\n@Component({\r\n  selector: 'app-game-boolean-answer',\r\n  templateUrl: './game-boolean-answer.component.html',\r\n  styleUrls: ['./game-boolean-answer.component.css']\r\n})\r\nexport class GameBooleanAnswerComponent extends GameAnswerComponent {\r\n  options: string[] = [\"true\", \"false\"];\r\n  currentAnswer: string = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  onAnswerClick(option: string): void {\r\n    this.currentAnswer = option;\r\n  }\r\n\r\n  getSubmittedAnswers(): Answer[] {\r\n    let answer = this.getEmptyAnswer();\r\n    answer.text = this.currentAnswer;\r\n    return [answer];\r\n  }\r\n}\r\n","<div class=\"container\" fxLayout=\"row\" fxLayoutAlign=\"space-evenly\">\r\n    <mat-button-toggle-group>\r\n        <mat-button-toggle class=\"answer-button\" color=\"accent\" *ngFor=\"let option of options\"\r\n            (click)=\"onAnswerClick(option)\">\r\n            {{option | titlecase}}</mat-button-toggle>\r\n    </mat-button-toggle-group>\r\n</div>","import { Router } from '@angular/router';\r\nimport { GameService } from './../../service/gameService/game.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Player } from 'src/app/models/game.model';\r\n\r\n@Component({\r\n  selector: 'app-game-finish',\r\n  templateUrl: './game-finish.component.html',\r\n  styleUrls: ['./game-finish.component.css']\r\n})\r\nexport class GameFinishComponent implements OnInit {\r\n  gameId: number;\r\n\r\n  rating: Observable<Player[]>;\r\n\r\n  constructor(\r\n    private gameService: GameService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getRating();\r\n  }\r\n\r\n  getRating() {\r\n    this.rating = this.gameService.subscribeRating();\r\n    this.gameService.finishGame();\r\n  }\r\n\r\n  quitGame() {\r\n    this.router.navigateByUrl('dashboard');\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <mat-card>\r\n        <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n            <h1> Game results</h1>\r\n            <div>\r\n                <button mat-raised-button class=\"start-button\" color=\"accent\" (click)=\"quitGame()\">Quit\r\n                </button>\r\n            </div>\r\n        </mat-card-header>\r\n\r\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n            <div class=\"user-list\" fxFlexAlign=\"center\"></div>\r\n            <h2>Rating</h2>\r\n            <mat-card>\r\n                <mat-list role=\"list\">\r\n                    <mat-list-item role=\"listitem\" *ngFor=\"let player of rating |async\">\r\n                        <div class=\"mat-list-item-content\" fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n                            <p fxFlexAlign=\"center\">{{player.userName}}</p>\r\n                            <p fxFlexAlign=\"center\"> {{player.userScore}}</p>\r\n                        </div>\r\n                    </mat-list-item>\r\n                </mat-list>\r\n            </mat-card>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>","import { GameAnswerComponent } from './../game-answer/game-answer.component';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n\r\n@Component({\r\n  selector: 'app-game-optional-answer',\r\n  templateUrl: './game-optional-answer.component.html',\r\n  styleUrls: ['./game-optional-answer.component.css']\r\n})\r\nexport class GameOptionalAnswerComponent extends GameAnswerComponent implements OnInit {\r\n  checked: boolean[] = [].fill(false, this.maxAnswerSize);\r\n\r\n  constructor(private changeDetectionRef: ChangeDetectorRef) {\r\n    super();\r\n    this.changeDetectionRef.detach();\r\n    setInterval(() => {\r\n      this.changeDetectionRef.reattach();\r\n      this.changeDetectionRef.markForCheck();\r\n    }, 1000);\r\n  }\r\n\r\n  OnInit() {\r\n  }\r\n\r\n  getSubmittedAnswers(): Answer[] {\r\n    let submittedAnswer: Answer[] = [];\r\n    this.answers.forEach(\r\n      (value, index) => {\r\n        if (this.checked[index]) {\r\n          submittedAnswer.push(value);\r\n        }\r\n      }\r\n    );\r\n\r\n    return submittedAnswer;\r\n  }\r\n\r\n}\r\n","<div class=\"container\" fxLayout=\"column\">\r\n    <p fxFlexAlign=\"center\">Select one or more answers</p>\r\n    <div fxLayout=\"row wrap\" fxLayoutAlign=\"center\">\r\n        <div *ngFor=\"let answer of answers; let i=index\" fxFlex=\"40%\" class=\"answer-option\">\r\n            <button mat-raised-button *ngIf=\"!checked[i]\" (click)=\"checked[i]=!checked[i]\" color=\"accent\"\r\n                fxLayout=\"column\" fxLayoutAlign=\"center\">\r\n                <img matCardImage [src]=\"answer.image\" alt=\"https://material.angular.io/assets/img/examples/shiba2.jpg\">\r\n                {{answer.text | titlecase}}</button>\r\n            <button mat-stroked-button *ngIf=\"checked[i]\" (click)=\"checked[i]=!checked[i]\" color=\"accent\"\r\n                fxLayout=\"column\" fxLayoutAlign=\"center\"><img matCardImage\r\n                    src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\">\r\n                {{answer.text | titlecase}}</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Player } from './../../models/game.model';\r\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\r\nimport { GameService } from './../../service/gameService/game.service';\r\nimport { GameStringAnswerComponent } from './../game-string-answer/game-string-answer.component';\r\nimport { GameBooleanAnswerComponent } from './../game-boolean-answer/game-boolean-answer.component';\r\nimport { GameOptionalAnswerComponent } from './../game-optional-answer/game-optional-answer.component';\r\nimport { GameAnswerComponent } from './../game-answer/game-answer.component';\r\nimport { Component, OnInit, ViewChild, ViewContainerRef, ComponentFactory, ComponentFactoryResolver, ComponentRef, AfterViewInit, EventEmitter, HostListener, AfterViewChecked } from '@angular/core';\r\nimport { Question, QuestionType } from 'src/app/models/question.model';\r\nimport { GameSequenceAnswerComponent } from '../game-sequence-answer/game-sequence-answer.component';\r\nimport { Answer } from 'src/app/models/answer.model';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { CanComponentDeactivate } from 'src/app/service/canDeactivateGuardService/can-deactivate-guard.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-game-question',\r\n  templateUrl: './game-question.component.html',\r\n  styleUrls: ['./game-question.component.css']\r\n})\r\nexport class GameQuestionComponent implements OnInit, AfterViewChecked, CanComponentDeactivate {\r\n  @ViewChild('dynamicComponent', { read: ViewContainerRef }) answerHost;\r\n\r\n  gameId: number;\r\n\r\n  initTime: number;\r\n  questionTimer: number;\r\n\r\n  question: Question;\r\n  questionNumber: number;\r\n  player: Player; //FIXME: set user\r\n  answers: Answer[];\r\n\r\n  image: string = null;\r\n\r\n  componentRef: ComponentRef<GameAnswerComponent>;\r\n\r\n  navigationSubscription: any;\r\n  initialized: boolean = false;\r\n\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private gameService: GameService) {\r\n    this.navigationSubscription = this.router.events.subscribe((e: any) => {\r\n      if (e instanceof NavigationEnd) {\r\n        this.initialized = false;\r\n        this.ngOnInit();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.gameId = this.activatedRoute.snapshot.params['gameId'];\r\n\r\n    this.player = history.state.player;\r\n    this.questionNumber = history.state.questionNumber + 1;\r\n    this.question = history.state.question;\r\n    this.initTime = history.state.questionTimer;\r\n    this.questionTimer = this.initTime;\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n      this.loadComponent();\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  loadComponent() {\r\n    while (!this.answerHost) { }\r\n    let titleCasePipe = new TitleCasePipe();\r\n    var componentFactory: ComponentFactory<GameAnswerComponent>;\r\n    switch (titleCasePipe.transform(this.question.type)) {\r\n      case QuestionType.OPTION:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(GameOptionalAnswerComponent);\r\n        break;\r\n      case QuestionType.BOOLEAN:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(GameBooleanAnswerComponent);\r\n        break;\r\n      case QuestionType.ANSWER:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(GameStringAnswerComponent);\r\n        break;\r\n      case QuestionType.SEQUENCE:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(GameSequenceAnswerComponent);\r\n        break;\r\n    }\r\n\r\n    this.answerHost.clear();\r\n    this.componentRef = this.answerHost.createComponent(componentFactory);\r\n\r\n    this.componentRef.instance.answers = this.question.answerList;\r\n    this.componentRef.instance.questionId = this.question.id;\r\n\r\n    this.componentRef.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  interval: NodeJS.Timeout;\r\n\r\n  startTimer() {\r\n    this.questionTimer = this.initTime;\r\n\r\n    this.interval = setInterval(() => {\r\n      if (this.questionTimer > 0) {\r\n        this.questionTimer--\r\n      } else {\r\n        clearInterval(this.interval);\r\n        this.submitAnswer();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  submitAnswer() {\r\n    let answers = this.componentRef.instance.getSubmittedAnswers();\r\n\r\n    for (let answer of answers) {\r\n      answer.questionId = this.question.id;\r\n    }\r\n\r\n    this.gameService.postAnswer(answers);\r\n  }\r\n\r\n  canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\r\n    if (window.confirm('Quit this page?')) {\r\n      this.gameService.disconnect();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","<div class=\"container\" *ngIf=\"question\">\r\n    <mat-card fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n            <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"center\">\r\n                <mat-card-title>Question {{questionNumber}} : {{question.text}}\r\n                </mat-card-title>\r\n            </mat-card-header>\r\n            <mat-card-content >\r\n                <div class=\"image\" cols=\"6\" rowHeight=\"20rem\"  fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n                  <div >\r\n                    <div>\r\n                      <mat-progress-spinner [value]=\"100*(questionTimer/initTime)\" fxFlexAlign=\"center\">\r\n                      </mat-progress-spinner>\r\n                      <div id=\"time\" fxFlexAlign=\"center\">\r\n                        <h3>{{questionTimer}} sec</h3>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"image\" colspan=\"4\" *ngIf=\"question.image!=null\">\r\n                    <div class=\"w-100\">\r\n                      <img matCardImage [src] = \"question.image\" alt=\"https://material.angular.io/assets/img/examples/shiba2.jpg\"\r\n                           fxFlexAlign=\"center\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n            </mat-card-content>\r\n        </div>\r\n        <ng-template #dynamicComponent></ng-template>\r\n    </mat-card>\r\n</div>\r\n","import { GameAnswerComponent } from './../game-answer/game-answer.component';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n\r\n@Component({\r\n  selector: 'app-game-sequence-answer',\r\n  templateUrl: './game-sequence-answer.component.html',\r\n  styleUrls: ['./game-sequence-answer.component.css']\r\n})\r\nexport class GameSequenceAnswerComponent extends GameAnswerComponent implements OnInit {\r\n  constructor(private changeDetectionRef: ChangeDetectorRef) {\r\n    super();\r\n    this.changeDetectionRef.detach();\r\n    setInterval(() => {\r\n      this.changeDetectionRef.reattach();\r\n      this.changeDetectionRef.markForCheck();\r\n    }, 1000);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.answers, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  getSubmittedAnswers(): Answer[] {\r\n    return this.answers;\r\n  }\r\n}\r\n","<div class=\"container\" fxLayout=\"column\">\r\n    <p fxFlexAlign=\"center\">Tap and hold to arrange the tiles in the correct order</p>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-evenly\">\r\n        <div cdkDropList cdkDropListOrientation=\"horizontal\" class=\"list\" (cdkDropListDropped)=\"drop($event)\">\r\n            <div class=\"box\" *ngFor=\"let answer of answers\" cdkDrag fxLayout=\"row\" fxLayoutAlign=\"center\"><img\r\n                    matCardImage [src] = \"answer.image\" alt=\"https://material.angular.io/assets/img/examples/shiba2.jpg\"><span\r\n                    fxFlexAlign=\"center\">{{answer.text}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { FormGroup } from '@angular/forms';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\nimport { GameService } from './../../service/gameService/game.service';\r\nimport { CurrentUserService } from './../../service/current-user.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Game } from './../../models/game.model';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-game-settings',\r\n  templateUrl: './game-settings.component.html',\r\n  styleUrls: ['./game-settings.component.css']\r\n})\r\nexport class GameSettingsComponent implements OnInit {\r\n  gameSettingsForm = new FormGroup({\r\n    maxUserNumberControl: new FormControl(\"10\", [Validators.min(2), Validators.max(50)]),\r\n    questionTimerControl: new FormControl(\"10\", [Validators.min(5), Validators.max(50)])\r\n  });\r\n\r\n  game: Game = {\r\n    id: null,\r\n    quizId: null,\r\n    hostId: null,\r\n    questionTimer: 10,\r\n    maxUsersNumber: 10,\r\n    players: null\r\n  }\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private router: Router,\r\n    private currentUserService: CurrentUserService,\r\n    private gameService: GameService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      this.game.quizId = +params['quizId'];\r\n    });\r\n    this.game.hostId = parseInt(this.currentUserService.getCurrentUser().id);\r\n  }\r\n\r\n  createGame(): void {\r\n    if (this.gameSettingsForm.valid) {\r\n      this.game.maxUsersNumber = this.gameSettingsForm.get('maxUserNumberControl').value;\r\n      this.game.questionTimer = this.gameSettingsForm.get('questionTimerControl').value;\r\n\r\n      this.gameService.createGame(this.game).subscribe(\r\n        response => this.router.navigate(['/game/start', response]),\r\n\r\n        err => {\r\n          console.log(\"Error creating game: \" + err)\r\n        }  //FIXME: handle errors\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"container\">\r\n    <mat-card>\r\n        <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n            <h1>Apply Settings</h1>\r\n            <button mat-raised-button color=\"accent\" (click)=\"createGame()\">Save Settings</button>\r\n        </mat-card-header>\r\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n            <h2 fxFlexAlign=\"center\">Settings</h2>\r\n            <form [formGroup]=\"gameSettingsForm\" fxLayout.gt-sm=\"row\" fxLayout=\"column\" fxFlex=\"auto\"\r\n                fxLayoutAlign=\"space-evenly\">\r\n                <mat-form-field>\r\n                    <mat-label>Max number of users</mat-label>\r\n                    <input matInput type=\"number\" formControlName=\"maxUserNumberControl\" min=\"2\" max=\"50\" required>\r\n                    <mat-error>Please enter a value between 2 and 50</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <mat-label>Timer for question</mat-label>\r\n                    <input matInput type=\"number\" formControlName=\"questionTimerControl\" min=\"5\" max=\"50\" required>\r\n                    <mat-error>Please enter a value between 5 and 50</mat-error>\r\n                </mat-form-field>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>","import { map } from 'rxjs/operators';\r\nimport { AuthenticationService } from './../../service/loginService/authentication.service';\r\nimport { Player } from './../../models/game.model';\r\nimport { Observable } from 'rxjs';\r\nimport { GameService } from './../../service/gameService/game.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CurrentUserService } from 'src/app/service/current-user.service';\r\nimport { Game } from 'src/app/models/game.model';\r\nimport { CanComponentDeactivate } from 'src/app/service/canDeactivateGuardService/can-deactivate-guard.service';\r\n\r\n@Component({\r\n  selector: 'app-game-start',\r\n  templateUrl: './game-start.component.html',\r\n  styleUrls: ['./game-start.component.css']\r\n})\r\nexport class GameStartComponent implements OnInit, CanComponentDeactivate {\r\n  gameId: number;\r\n\r\n  player: Player = {\r\n    userId: null,\r\n    userScore: 0,\r\n    userName: null,\r\n    authorize: false\r\n  }\r\n\r\n  game$: Observable<Game>;\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private gameService: GameService,\r\n    private authenticationService: AuthenticationService,\r\n    private currentUserService: CurrentUserService) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.authenticationService.logIn) {\r\n      this.player.userId = parseInt(this.currentUserService.getCurrentUser().id);\r\n      this.player.authorize = true;\r\n    } else {\r\n      this.player.userId = new Date().getMilliseconds();\r\n      this.player.userName = \"Player \" + this.player.userId;\r\n      this.player.authorize = false;\r\n    }\r\n    this.route.params.subscribe(params => {\r\n      this.gameId = +params['gameId'];\r\n      this.connectToGame();\r\n    },\r\n      err => console.log(\"Error loading page: \" + err)  //FIXME\r\n    );\r\n  }\r\n\r\n  connectToGame(): void {\r\n    this.gameService.initializeWebSocketConnection(this.gameId, this.player);\r\n    this.game$ = this.gameService.waitGameStart().pipe(\r\n      map(resp => JSON.parse(resp))\r\n    );\r\n    this.gameService.subscribeQuestion();\r\n    this.gameService.connect();\r\n  }\r\n\r\n  startGame(): void {\r\n    this.gameService.startGame();\r\n  }\r\n\r\n  canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\r\n    if (window.confirm('Quit this page?')) {\r\n      this.gameService.disconnect();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"(game$|async) as game\">\r\n    <mat-card>\r\n        <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"space-between\" *ngIf=\"game.hostId==player.userId\">\r\n            <h1> Game Start</h1>\r\n            <div>\r\n                <button mat-raised-button class=\"start-button\" color=\"accent\" (click)=\"startGame()\">Start\r\n                </button>\r\n            </div>\r\n        </mat-card-header>\r\n\r\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n            <div class=\"user-list\" fxFlexAlign=\"center\"></div>\r\n            <h2>Connected users</h2>\r\n            <mat-card>\r\n                <mat-list role=\"list\">\r\n                    <mat-list-item role=\"listitem\" *ngFor=\"let player of game.players\">\r\n                        {{player.userName}}\r\n                    </mat-list-item>\r\n                </mat-list>\r\n            </mat-card>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>","import { FormControl, Validators } from '@angular/forms';\r\nimport { GameAnswerComponent } from './../game-answer/game-answer.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n\r\n@Component({\r\n  selector: 'app-game-string-answer',\r\n  templateUrl: './game-string-answer.component.html',\r\n  styleUrls: ['./game-string-answer.component.css']\r\n})\r\nexport class GameStringAnswerComponent extends GameAnswerComponent {\r\n  stringAnswer: FormControl = new FormControl('', Validators.required);\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getSubmittedAnswers(): Answer[] {\r\n    let answer = this.getEmptyAnswer();\r\n\r\n    answer.text = this.stringAnswer.value;\r\n\r\n    return [answer];\r\n  }\r\n}\r\n","<div class=\"container\" fxLayout=\"row\" fxLayoutAlign=\"center\">\r\n    <mat-form-field class=\"answer-input\" appearance=\"outline\">\r\n        <mat-label>Enter your answer</mat-label>\r\n        <input matInput placeholder=\"Answer\" [formControl]=\"stringAnswer\" maxlength=\"30\" required>\r\n        <mat-error *ngIf=\"stringAnswer.invalid && (stringAnswer.dirty|| stringAnswer.touched)\"\r\n            class=\"alert alert-danger\">\r\n            <mat-error *ngIf=\"stringAnswer.errors.required\">\r\n                Answer is required.\r\n            </mat-error>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\nclass ImageSnippet {\r\n  constructor(public src: string, public file: File) { }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-image-upload',\r\n  templateUrl: './image-upload.component.html',\r\n  styleUrls: ['./image-upload.component.css']\r\n})\r\nexport class ImageUploadComponent implements OnInit {\r\n  selectedFile: ImageSnippet;\r\n  name: String;\r\n\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.name = \"Choose file\";\r\n  }\r\n\r\n  processFile(imageInput: any) {\r\n    const file: File = imageInput.files[0]\r\n    const reader = new FileReader();\r\n\r\n    reader.addEventListener('load', (event: any) => {\r\n      this.selectedFile = new ImageSnippet(event.target.result, file);\r\n      this.name = file.name;\r\n    })\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"image-input\">\r\n    <mat-form-field class=\"image-name\">\r\n        <mat-label #imageLabel class=\"custom-file-label\" for=\"inputGroupFile01\" ng-bind=\"name\">{{name}}</mat-label>\r\n        <input #imageInput style=\"display: none;\" id=\"image\" type=\"file\" accept=\"image/*\" aria-label=\"Select image\"\r\n            (change)=\"processFile(imageInput)\">\r\n        <input matInput disabled>\r\n    </mat-form-field>\r\n    <button mat-raised-button class=\"input-group-text\" id=\"inputGroupFileAddon01\"\r\n        (click)=\"imageInput.click()\">Image</button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {User} from \"../models/user\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  model: User = {\r\n    image: undefined, notificationStatus: undefined,\r\n    about: \"\",\r\n    birthdate: undefined,\r\n    city: \"\",\r\n    countryId: \"\",\r\n    gender: undefined,\r\n    name: \"\",\r\n    rating: \"\",\r\n    role: undefined,\r\n    surname: \"\",\r\n    id: null,\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  constructor(private authenticationService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  Login() {\r\n    this.authenticationService.login(this.model.email, this.model.password);\r\n  }\r\n}\r\n","<div fxLayout=\"row\" class>\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form name=\"form\" #f=\"ngForm\" (ngSubmit)=\"f.form.valid && Login()\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input type=\"email\" matInput\r\n               name=\"login\"\r\n               [(ngModel)]=\"model.email\"\r\n               #email=\"ngModel\"\r\n               [ngClass]=\"{ 'is-invalid': f.submitted && email.invalid }\"/>\r\n        <mat-error *ngIf=\"email.errors?.required\">Email is required</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\" matInput\r\n               name=\"password\"\r\n               [(ngModel)]=\"model.password\">\r\n      </mat-form-field>\r\n      <br>\r\n      <button mat-raised-button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n    <a routerLink=\"/registration\">Registration<span class=\"sr-only\">(current)</span></a>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n","export enum Gender {\r\n  MALE,\r\n  FEMALE,\r\n  NOT_MENTIONED\r\n}\r\n","export class ModeratorComment {\r\n  quizId: number;\r\n  moderatorId: number;\r\n  comment: string;\r\n  commentDate: Date;\r\n\r\n  constructor(quizId: number, moderatorId: number, comment: string, commentDate: Date) {\r\n    this.quizId = quizId;\r\n    this.comment = comment;\r\n    this.commentDate = commentDate;\r\n    this.moderatorId = moderatorId;\r\n  }\r\n}\r\n","export enum NotificationStatus {\r\n  ON,\r\n  OFF,\r\n  FRIENDS_ONLY,\r\n  SYSTEM_ONLY\r\n}\r\n","import { Answer } from './answer.model';\r\n\r\nexport enum QuestionType {\r\n    OPTION = \"Option\",\r\n    BOOLEAN = \"Boolean\",\r\n    ANSWER = \"Answer\",\r\n    SEQUENCE = \"Sequence\"\r\n}\r\n\r\nexport interface Question {\r\n    id: number,\r\n    quizId: number,\r\n    type: string,\r\n    text: string,\r\n    active: boolean,\r\n    image: string,\r\n    answerList: Answer[],\r\n    changed: boolean,\r\n    deleted: boolean\r\n} ","import { User } from \"./user\";\r\nimport { Category } from \"./category.model\";\r\n\r\n\r\nexport enum StatusType {\r\n  PENDING = \"Pending\",\r\n  ACTIVE = \"Active\",\r\n  DEACTIVATED = \"Deactivated\",\r\n  DELETED = \"Deleted\"\r\n}\r\n\r\nexport interface Quiz {\r\n  id: number;\r\n  name: string;\r\n  author: User;\r\n  category: Category;\r\n  date: string;\r\n  description: string;\r\n  status: StatusType;\r\n  modification_time: string;\r\n}\r\n","export enum Role {\r\n  USER,\r\n  MODERATOR,\r\n  ADMIN,\r\n  SUPER_ADMIN\r\n}\r\n","export enum StatusType {\r\n  PENDING,\r\n  ACTIVE,\r\n  DEACTIVATED,\r\n  DELETED\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from '../service/loginService/authentication.service';\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n  isOpen: boolean = true;\r\n  currentUser: any;\r\n  username: string;\r\n  id: string;\r\n\r\n  constructor(public authService: AuthenticationService,\r\n    private router: Router) {\r\n    this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    if (this.currentUser != null) {\r\n      this.username = this.currentUser.email;\r\n      this.id = this.currentUser.id;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  toProfile() {\r\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\r\n      this.router.navigate(['profile', this.id, { outlets: { profilenav: 'profinfo' } }]);\r\n    });\r\n  }\r\n\r\n  toGame(gameId: number) {\r\n    this.isOpen = true;\r\n    this.router.navigateByUrl(`/game/start/${gameId}`);\r\n  }\r\n\r\n}\r\n","<mat-toolbar>\r\n  <mat-toolbar-row>\r\n\r\n    <a mat-button routerLink=\"/dashboard\">QUIZ</a>\r\n    <a mat-button routerLink=\"/quizzes\">Quizzes</a>\r\n    <span class=\"spacer\"></span>\r\n\r\n    <button mat-stroked-button class=\"connect-button\" *ngIf=\"isOpen\" (click)=\"isOpen=false\">Connect to game</button>\r\n    <mat-form-field appearance=\"outline\" style=\"margin-bottom: -1.25em\" *ngIf=\"!isOpen\">\r\n      <input matInput #gameId type=\"number\" placeholder=\"Game id\" (keydown.enter)=\"toGame(gameId.value)\">\r\n    </mat-form-field>\r\n\r\n    <span class=\"spacer\"></span>\r\n    <a mat-button routerLink=\"/registration\" *ngIf=\"!authService.logIn\">Register</a>\r\n    <a mat-button routerLink=\"/login\" *ngIf=\"!authService.logIn\">Login</a>\r\n    <a mat-button [routerLink]=\"['profile', id, {outlets: {profilenav: 'profinfo'}}]\"\r\n      *ngIf=\"authService.logIn\">{{username}}</a>\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\">\r\n      <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button mat-menu-item [routerLink]=\"['profile', id, {outlets: {profilenav: 'profinfo'}}]\"\r\n        *ngIf=\"authService.logIn\">\r\n        <mat-icon>assignment_ind</mat-icon>\r\n        <span>Profile</span>\r\n      </button>\r\n      <button mat-menu-item (click)=\"authService.logout()\" *ngIf=\"authService.logIn\" routerLink=\"/\">\r\n        <mat-icon>exit_to_app</mat-icon>\r\n        <span>Logout</span>\r\n      </button>\r\n    </mat-menu>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {ProfileService} from '../../service/profileService/profile.service';\r\nimport {Router} from '@angular/router';\r\nimport {ShareIdService} from '../../service/profileService/share-id.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {RegistrationService} from '../../service/registrationService/registration.service';\r\n\r\nimport {Gender} from '../../models/gender.enum';\r\nimport {NotificationStatus} from '../../models/notification-status.enum';\r\nimport {User} from \"../../models/user\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {Subject} from \"rxjs\";\r\nimport {Role} from \"../../models/role.enum\";\r\n\r\n@Component({\r\n  selector: 'app-admin-users',\r\n  templateUrl: './admin-users.component.html',\r\n  styleUrls: ['./admin-users.component.css']\r\n})\r\nexport class AdminUsersComponent implements OnInit {\r\n  model: User = {\r\n    id: null,\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    surname: '',\r\n    gender: Gender[Symbol.hasInstance],\r\n    birthdate: new Date(),\r\n    city: '',\r\n    about: '',\r\n    image: '',\r\n    role: Role[Symbol.hasInstance],\r\n    notificationStatus: NotificationStatus[Symbol.hasInstance],\r\n    countryId: null,\r\n    rating: null\r\n  };\r\n  adminUsers: User[];\r\n  displayedColumns: string[] = ['name', 'email', 'role', 'active', 'actions'];\r\n  dataSource: MatTableDataSource<User>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  public isCollapsed = true;\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  currentUserId: string;\r\n  isAdmin = false;\r\n  isSuperAdmin = false;\r\n  roleUs: Role;\r\n  selectedRole = 'AllRole';\r\n  selectedStatus = 'AllStatus';\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [10, 20, 30, 40, 50];\r\n  currentUserRole = 'AllRole';\r\n  currentUserStatus = 'AllStatus';\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n\r\n  constructor(private profileService: ProfileService,\r\n              private router: Router,\r\n              private shareId: ShareIdService,\r\n              public regService: RegistrationService,\r\n              private formBuilder: FormBuilder) {\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n    this.roleUs = JSON.parse(localStorage.getItem('currentUser')).role;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.adminCheck();\r\n    this.registerForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      role: ['MODERATOR']\r\n    });\r\n    this.setPaginationParamDefault();\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        this.setPaginationParamDefault();\r\n        userSearch.length ==0 ? this.getAllAdminUsers() : this.filterRequest(userSearch);\r\n      });\r\n    this.searchByRoleStatus(this.currentUserRole, this.currentUserStatus);\r\n  }\r\n  onPageChanged(e) {\r\n    this.pageIndex = e.pageIndex;\r\n    this.pageSize = e.pageSize;\r\n    if (this.currentUserRole != undefined && this.currentUserStatus != undefined) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.searchByRoleStatus(this.currentUserRole, this.currentUserStatus);\r\n    } else if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterRequest(this.userRequest);\r\n    } else {\r\n      this.getAllAdminUsers();\r\n    }\r\n  }\r\n\r\n  searchByRoleStatus(userRole: string, userStatus: string) {\r\n    this.profileService.getUsersByRoleStatus(userRole, userStatus, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.adminUsers = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  filterRequest(filterText: string) {\r\n    this.profileService.getFilteredUsers(filterText, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.adminUsers = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 10;\r\n  }\r\n  setCurrentRole(role: string) {\r\n    this.currentUserRole = role;\r\n  }\r\n  setCurrentStatus(status: string) {\r\n    this.currentUserStatus = status;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    const input: User = JSON.parse(JSON.stringify(this.registerForm.value));\r\n    this.model.email = input.email;\r\n    if (this.roleUs === Role.ADMIN){\r\n      this.model.role = Role.MODERATOR;\r\n    }\r\n    else {\r\n      this.model.role = input.role;\r\n    }\r\n    this.addNewUser();\r\n  }\r\n  addNewUser(): void{\r\n    this.profileService.postRegisterInfo(this.model).subscribe(\r\n      res => {\r\n        alert('Activation code was sent');\r\n      },\r\n      error => {\r\n        alert(error.error.message);\r\n      }\r\n    );\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'adminUsers'}}]);\r\n    });\r\n  }\r\n  adminCheck(){\r\n    if (this.roleUs.toString() === Role[Role.SUPER_ADMIN]){\r\n      this.isSuperAdmin = true;\r\n    }\r\n    if (this.roleUs.toString() === Role[Role.ADMIN]){\r\n      this.isAdmin = true;\r\n    }\r\n  }\r\n  getAllAdminUsers() {\r\n    this.profileService.getAdminUsers(this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.currentUserRole = undefined;\r\n        this.adminUsers = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  checkOut(id: string, email: string) {\r\n    this.shareId.setEmail(email);\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n  deleteAdminUser(id) {\r\n    this.profileService.deleteAdminUsers(id).subscribe(\r\n      (resp: any) => {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'adminUsers'}}]);\r\n        });\r\n      },\r\n      error => {\r\n        alert('Something wrong while deleting user');\r\n      }\r\n    );\r\n  }\r\n  updateActiveStatusUser(id) {\r\n    this.profileService.updateActiveStatusUser(id).subscribe(\r\n      (resp: any) => {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'adminUsers'}}]);\r\n        });\r\n      },\r\n      error => {\r\n        alert('Something wrong while change active status');\r\n      }\r\n    );\r\n  }\r\n  get f() { return this.registerForm.controls; }\r\n}\r\n","<div fxLayout=\"column\">\r\n  <mat-accordion *ngIf=\"isAdmin || isSuperAdmin\">\r\n    <mat-expansion-panel>\r\n      <mat-expansion-panel-header >\r\n        <mat-panel-title *ngIf=\"roleUs.toString() == 'ADMIN'\">\r\n          Add moderator\r\n        </mat-panel-title>\r\n        <mat-panel-title *ngIf=\"roleUs.toString() == 'SUPER_ADMIN'\">\r\n          Add administrative user user\r\n        </mat-panel-title>\r\n        <mat-panel-description *ngIf=\"roleUs.toString() == 'ADMIN'\">\r\n          Enter the data of the new moderator\r\n        </mat-panel-description>\r\n        <mat-panel-description *ngIf=\"roleUs.toString() == 'SUPER_ADMIN'\">\r\n          Enter the data of the new administrative user\r\n        </mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n  <div fxLayout=\"row\" class >\r\n    <div fxFlex=\"30\"></div>\r\n    <div fxFlex=\"center center\">\r\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" >\r\n        <mat-form-field class=\"full-width\">\r\n          <mat-label>Email</mat-label>\r\n          <input  matInput formControlName=\"email\"  placeholder=\"Email\" name=\"email\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"/>\r\n          <mat-error *ngIf=\"f.email.errors?.required\">Email is required</mat-error>\r\n          <mat-error *ngIf=\"f.email.errors?.email\">Email must be a valid email address</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field *ngIf=\"isSuperAdmin\">\r\n          <mat-label>Choose role</mat-label>\r\n          <mat-select class=\"form-control\" id=\"selectRole\"  formControlName=\"role\">\r\n            <mat-option value=\"ADMIN\">ADMIN</mat-option>\r\n            <mat-option value=\"MODERATOR\" >MODERATOR</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <br>\r\n        <button mat-raised-button class=\"btn btn-primary\">Add new user</button>\r\n      </form>\r\n    </div>\r\n    <div fxFlex=\"30\"></div>\r\n  </div>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>\r\n<div #maincontent fxFlex=\"71\" class=\"scroll main\">\r\n<div class=\"input\">\r\n  <mat-form-field  appearance=\"outline\">\r\n    <mat-label>Search quiz</mat-label>\r\n    <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n           (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n  </mat-form-field>\r\n  <mat-form-field class=\"role_selection\">\r\n    <mat-label>Select role</mat-label>\r\n    <mat-select [(value)]=\"selectedRole\" disableRipple>\r\n      <mat-option value=\"AllRole\" (click)=\"setPaginationParamDefault(); setCurrentRole('AllRole'); onPageChanged($event);\" >All</mat-option>\r\n      <mat-option value=\"Admins\" (click)=\"setPaginationParamDefault(); setCurrentRole('ADMIN'); onPageChanged($event); \">ADMIN</mat-option>\r\n      <mat-option value=\"Moderators\" (click)=\"setPaginationParamDefault(); setCurrentRole('MODERATOR'); onPageChanged($event); \">MODERATOR</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <mat-form-field class=\"status_selection\">\r\n    <mat-label>Select status</mat-label>\r\n    <mat-select [(value)]=\"selectedStatus\" disableRipple>\r\n      <mat-option value=\"AllStatus\" (click)=\"setPaginationParamDefault(); setCurrentStatus('AllStatus'); onPageChanged($event);\" >All</mat-option>\r\n      <mat-option value=\"Active\" (click)=\"setPaginationParamDefault(); setCurrentStatus('ACTIVE'); onPageChanged($event); \">Active</mat-option>\r\n      <mat-option value=\"Deactivated\" (click)=\"setPaginationParamDefault(); setCurrentStatus('DEACTIVATED'); onPageChanged($event); \">Deactivated</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</div>\r\n<div class=\"mat-elevation-z8 w-75\">\r\n  <table mat-table [dataSource]=\"adminUsers\" class=\"mat-elevation-z8\" width=\"100%\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Name</th>\r\n      <td mat-cell *matCellDef=\"let element\"><a class=\"nav-link\" routerLink=\"\"\r\n                                                (click)=\"checkOut(element.id, element.email)\">\r\n        {{element.name}} {{element.surname}}</a></td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef> Email</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"role\">\r\n      <th mat-header-cell *matHeaderCellDef> Role</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.role}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"active\">\r\n      <th mat-header-cell *matHeaderCellDef>Status</th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <div *ngIf=\"element.active\">Active</div>\r\n        <div *ngIf=\"!element.active\">Deactivated</div>\r\n      </td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th  mat-header-cell  *matHeaderCellDef> Acting</th>\r\n      <td  mat-cell  *matCellDef=\"let row; let element;\">\r\n        <div class=\"buttonsAction\">\r\n          <button mat-stroked-button *ngIf=\"isAdmin && element.active\"  (click)=\"updateActiveStatusUser(element.id)\">Deactive</button>\r\n          <button mat-stroked-button *ngIf=\"isAdmin && !element.active\" (click)=\"updateActiveStatusUser(element.id)\">Active</button>\r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n  </mat-paginator>\r\n</div>\r\n</div>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router} from \"@angular/router\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.css']\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  public changePasswordForm: FormGroup;\r\n  submitted = false;\r\n  newPassword: string;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private profileService: ProfileService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.changePasswordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      confirmPassword: ['', Validators.required]\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n  }\r\n\r\n  get f() { return this.changePasswordForm.controls; }\r\n\r\n\r\n  public changingPassFormValidation(){\r\n    this.submitted = true;\r\n\r\n    if (this.changePasswordForm.invalid) {\r\n      return;\r\n    }\r\n    this.newPassword = this.changePasswordForm.value.password;\r\n    this.changePassword();\r\n  }\r\n\r\n  changePassword() {\r\n    this.profileService.updatePassword(this.newPassword).subscribe(\r\n      (resp: any) => {\r\n        alert(\"Password was changed\")\r\n        this.router.navigate(['/'])\r\n      },\r\n      error => {\r\n        alert(\"Something wrong while save password\")\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return;\r\n    }\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","<div fxLayout=\"row\" class >\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"changingPassFormValidation()\">\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput formControlName=\"password\"  placeholder=\"Password\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" required/>\r\n        <mat-error *ngIf=\"f.password.errors?.required\">Password is require</mat-error>\r\n        <mat-error *ngIf=\"f.password.errors?.pattern\">Must contain at least 8 or more characters</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Confirm password</mat-label>\r\n        <input type=\"password\"  matInput  placeholder=\"Password\" formControlName=\"confirmPassword\"  name=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.mustMatch\">Passwords must match</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\">Change password</button>\r\n\r\n    </form>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Quiz} from \"../../models/quiz\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\n\r\n@Component({\r\n  selector: 'app-favorite',\r\n  templateUrl: './favorite.component.html',\r\n  styleUrls: ['./favorite.component.css']\r\n})\r\nexport class FavoriteComponent implements OnInit {\r\n  constructor(private profileService: ProfileService) { }\r\n  quizzes:Quiz[];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [6, 12, 18];\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n    this.uploadFavoriteQuizzes();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.uploadFavoriteQuizzes()\r\n        } else {\r\n          this.filterFavoriteQuizzes(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  uploadFavoriteQuizzes(){\r\n    this.profileService.getFavoriteGames(this.pageSize, this.pageIndex).subscribe(\r\n      resp=>{\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 6;\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterFavoriteQuizzes(userSearch: string){\r\n    this.profileService.filterFavoriteRequest(userSearch, this.pageSize, this.pageIndex).subscribe(\r\n      resp=>{\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  choseRequest(){\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterFavoriteQuizzes(this.userRequest);\r\n    } else {\r\n      this.uploadFavoriteQuizzes();\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search quiz</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n<div  #maincontent fxLayout=\"row wrap\">\r\n  <div *ngFor=\"let quiz of quizzes\" fxLayout=\"row wrap\">\r\n    <app-quiz [quizData]=\"quiz\">\r\n    </app-quiz>\r\n  </div>\r\n\r\n</div>\r\n<mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n               (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n</mat-paginator>\r\n","import {ProfileService} from '../../service/profileService/profile.service';\r\nimport {ShareIdService} from '../../service/profileService/share-id.service';\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {User} from \"../../models/user\";\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-friends',\r\n  templateUrl: './friends.component.html',\r\n  styleUrls: ['./friends.component.css']\r\n})\r\nexport class FriendsComponent implements OnInit {\r\n  friends: User[];\r\n  displayedColumns: string[] = ['name', 'rating', 'actions'];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  sortDirection = undefined;\r\n\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [9, 18, 27];\r\n\r\n  constructor(private profileService: ProfileService,\r\n              private router: Router,\r\n              private shareId: ShareIdService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n\r\n    this.uploadFriends();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.uploadFriends()\r\n        } else {\r\n          this.filterFriends(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  checkOut(id: string, email: string) {\r\n    this.shareId.setEmail(email);\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 9;\r\n  }\r\n\r\n  uploadFriends(){\r\n    this.profileService.getFriends(this.pageSize, this.pageIndex, this.sortDirection).subscribe(resp => {\r\n      this.friends = resp.responceList;\r\n      this.length = resp.totalNumberOfElement;\r\n    });\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterFriends(userSearch: string) {\r\n    this.profileService.filterFriendsRequest(userSearch, this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp => {\r\n        this.friends = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  sortFriends($event) {\r\n    this.sortDirection = $event.direction==''? undefined : $event;\r\n    this.setPaginationParamDefault();\r\n    this.choseRequest();\r\n  }\r\n\r\n  choseRequest(){\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterFriends(this.userRequest);\r\n    } else {\r\n      this.uploadFriends();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search friend</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n<div id=\"table\" class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"friends\" class=\"mat-elevation-z8\" matSort (matSortChange) = \"sortFriends($event)\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n      <td mat-cell *matCellDef=\"let element\" ><a routerLink=\"\"\r\n                                                (click)=\"checkOut(element.id, element.email)\">\r\n        {{element.name}} {{element.surname}}</a></td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"rating\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Rating</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.rating}}</td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell  *matCellDef>\r\n        <button mat-icon-button>\r\n          <mat-icon>chat</mat-icon>\r\n        </button>\r\n        <button mat-icon-button>\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event)\">\r\n  </mat-paginator>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {DomSanitizer, SafeResourceUrl} from \"@angular/platform-browser\";\r\nimport {NotificationStatus} from \"../../models/notification-status.enum\";\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\n\r\n@Component({\r\n  selector: 'app-left-bar',\r\n  templateUrl: './left-bar.component.html',\r\n  styleUrls: ['./left-bar.component.css']\r\n})\r\nexport class LeftBarComponent implements OnInit {\r\n  username = JSON.parse(localStorage.getItem('currentUser')).email;\r\n  currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n  notificationStatus: NotificationStatus;\r\n  progressImage: any;\r\n  imageUrl: string;\r\n  id: string;\r\n  constructor(private profileService: ProfileService,\r\n              private sanitizer: DomSanitizer,\r\n              private shareId: ShareIdService) {\r\n    this.id = shareId.shareId();\r\n\r\n    if (shareId.shareEmail() != undefined){\r\n      this.username = shareId.shareEmail();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uploadFile();\r\n    this.getNotification();\r\n  }\r\n\r\n  fileProgress(imageInput: any){\r\n    this.progressImage = <File>imageInput.target.files[0];\r\n    this.changeImg();\r\n  }\r\n\r\n  changeImg() {\r\n    this.profileService.updateImage(this.progressImage).subscribe(\r\n      resp => {\r\n        this.uploadFile();\r\n        alert(\"Icon was changed\")\r\n      },\r\n      error => {\r\n        alert(\"Error while updating icon\")\r\n      }\r\n    )\r\n  }\r\n\r\n  uploadFile(){\r\n    this.profileService.getProfileImage(this.id).subscribe(\r\n      resp => {\r\n        this.imageUrl = resp.text;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  change(){\r\n    this.profileService.updateNotificationStatus(this.notificationStatus).subscribe(\r\n      resp =>{\r\n        alert(\"Notification status was changed\")\r\n      },\r\n      error => {\r\n        alert(\"Error while change notification status\")\r\n      }\r\n    );\r\n  }\r\n\r\n  getNotification() {\r\n    this.profileService.getUserNotificationStatus().subscribe(\r\n      resp =>{\r\n        this.notificationStatus = resp;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-card class=\"card\" >\r\n\r\n  <img mat-card-image [src]=\"imageUrl\" height=\"250\" width=\"250\">\r\n  <br>\r\n  <div fxLayout=\"column\">\r\n    <div fxLayoutAlign=\"end\">\r\n      <button mat-icon-button id=\"changeImg\" (click)=\"image.click()\" *ngIf=\"currentUserId==id\"  >\r\n        <input style=\"display: none\" type=\"file\" accept=\"image/*\" (change)=\"fileProgress($event)\" #image>\r\n        <mat-icon>cloud_upload</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n  <mat-card-content fxLayoutAlign=\"center\">\r\n    <p>{{username}}</p>\r\n\r\n  </mat-card-content >\r\n  <mat-card-actions fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"currentUserId==id\">\r\n    <button mat-raised-button [routerLink]=\"[{outlets: {profilenav: 'changePass'}}]\" >Change password</button>\r\n    <br>\r\n\r\n\r\n<!--    <mat-form-field>\r\n      <mat-label>Notification status</mat-label>\r\n      <mat-select [(value)]=\"notificationStatus\">\r\n        <mat-option value=\"ON\" (click)=\"change()\">ON</mat-option>\r\n        <mat-option value=\"OFF\" (click)=\"change()\">OFF</mat-option>\r\n        <mat-option value=\"FRIENDS_ONLY\" (click)=\"change()\">FRIENDS_ONLY</mat-option>\r\n        <mat-option value=\"SYSTEM_ONLY\" (click)=\"change()\">SYSTEM_ONLY</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>-->\r\n  </mat-card-actions>\r\n</mat-card>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ProfileService} from '../../service/profileService/profile.service';\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Quiz} from \"../../models/quiz\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\nimport {RejectMessagesDialogComponent} from \"./reject-messages-dialog/reject-messages-dialog.component\";\r\nimport { NewQuizService } from 'src/app/service/newQuizService/new-quiz.service';\r\nimport {Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-my-quizzes',\r\n  templateUrl: './my-quizzes.component.html',\r\n  styleUrls: ['./my-quizzes.component.css']\r\n})\r\nexport class MyQuizzesComponent implements OnInit {\r\n  userQuizzes: Quiz[];\r\n  displayedColumns: string[] = ['name', 'category', 'status', 'actions'];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  sortDirection = undefined;\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [8, 16, 24];\r\n\r\n  rejectedQuizzes: Quiz[];\r\n  rejectedSortDirection = undefined;\r\n  rejectedLength = 0;\r\n  rejectedPageIndex: number;\r\n  rejectedPageSize: number;\r\n  rejectedPageSizeOptions: number[] = [8, 16, 24];\r\n\r\n\r\n  constructor(private profileService: ProfileService,\r\n              public dialog: MatDialog,\r\n              private quizService: NewQuizService,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n    this.getUserQuizzes();\r\n\r\n    this.setPaginationRejectedParamDefault();\r\n    this.getUserRejectedQuizzes();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.getUserQuizzes();\r\n        } else {\r\n          this.filterQuizzes(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  getUserQuizzes() {\r\n    this.profileService.getUserQuizzes(this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp => {\r\n        this.userQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      });\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 8;\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterQuizzes(userSearch: string) {\r\n    this.profileService.filterQuizzesRequest(userSearch, this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp => {\r\n        this.userQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  choseRequest() {\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterQuizzes(this.userRequest);\r\n    } else {\r\n      this.getUserQuizzes();\r\n    }\r\n  }\r\n\r\n  sortQuizzes($event) {\r\n    this.sortDirection = $event.direction == '' ? undefined : $event;\r\n    this.setPaginationParamDefault();\r\n    this.choseRequest();\r\n  }\r\n\r\n  getUserRejectedQuizzes() {\r\n    this.profileService.getRejectedQuizzes(this.rejectedPageSize, this.rejectedPageIndex, this.rejectedSortDirection).subscribe(\r\n      resp => {\r\n        this.rejectedQuizzes = resp.responceList;\r\n        this.rejectedLength = resp.totalNumberOfElement;\r\n      });\r\n  }\r\n\r\n  setPaginationRejectedParamDefault() {\r\n    this.rejectedPageIndex = 0;\r\n    this.rejectedPageSize = 8;\r\n  }\r\n\r\n  onPageRejectedChanged($event: PageEvent) {\r\n    this.rejectedPageIndex = $event.pageIndex;\r\n    this.rejectedPageSize = $event.pageSize;\r\n    this.choseRejectedRequest();\r\n  }\r\n\r\n  choseRejectedRequest() {\r\n      if (this.rejectedPageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.getUserRejectedQuizzes();\r\n  }\r\n\r\n  sortRejectedQuizzes($event) {\r\n    this.rejectedSortDirection = $event.direction == '' ? undefined : $event;\r\n    this.setPaginationRejectedParamDefault();\r\n    this.choseRejectedRequest();\r\n  }\r\n\r\n  openDialog(id: number) {\r\n    this.dialog.open(RejectMessagesDialogComponent, {\r\n      data: id\r\n    });\r\n  }\r\n\r\n  editQuiz(quiz: Quiz) {\r\n    this.quizService.getQuizInfo(quiz.id).subscribe(\r\n      resp => this.router.navigateByUrl('/new_quiz', {\r\n        state: {\r\n          quiz: resp\r\n        }\r\n      }),\r\n      err => {\r\n        console.log(err);\r\n        alert(err.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  onStartClick(id: string): void {\r\n    this.router.navigate(['/game/settings', id]);\r\n  }\r\n}\r\n","<div id=\"add-quiz-button\">\r\n  <button mat-raised-button routerLink=\"/new_quiz\">Create quiz</button>\r\n</div>\r\n<br>\r\n<mat-accordion id=\"rejected\">\r\n  <mat-expansion-panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title fxLayoutAlign=\"center\">\r\n        <p>Rejected quiz</p>\r\n        <p>\r\n          <span matBadge=\"{{rejectedLength}}\" matBadgeOverlap=\"false\" matBadgePosition=\"above\"></span>\r\n        </p>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n\r\n    <div class=\"table2\" class=\"mat-elevation-z8\">\r\n      <table mat-table [dataSource]=\"rejectedQuizzes\" class=\"mat-elevation-z8\" matSort\r\n             (matSortChange)=\"sortRejectedQuizzes($event)\">\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n          <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">{{element.name}}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"category\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>\r\n          <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">{{element.category}}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"status\">\r\n          <th mat-header-cell *matHeaderCellDef>Status</th>\r\n          <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">Rejected</td>\r\n        </ng-container>\r\n\r\n\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th id=\"actions2\" mat-header-cell *matHeaderCellDef> Acting</th>\r\n          <mat-cell *matCellDef=\"let row\">\r\n            <button mat-icon-button (click)=\"editQuiz(row)\">\r\n              <mat-icon>edit</mat-icon>\r\n            </button>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row class=\"reject\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      </table>\r\n      <mat-paginator [pageIndex]=\"rejectedPageIndex\" [length]=\"rejectedLength\" [pageSize]=\"rejectedPageSize\"\r\n                     [pageSizeOptions]=\"rejectedPageSizeOptions\"\r\n                     (page)=\"onPageRejectedChanged($event)\"></mat-paginator>\r\n    </div>\r\n\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n<mat-form-field class=\"input-form\">\r\n  <mat-label>Search quiz</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n\r\n<br>\r\n\r\n<div id=\"table\" class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"userQuizzes\" class=\"mat-elevation-z8\" matSort (matSortChange)=\"sortQuizzes($event)\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.category}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"status\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.status}}</td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th id=\"actions\" mat-header-cell *matHeaderCellDef>Acting</th>\r\n      <mat-cell *matCellDef=\"let row\" fxLayoutAlign=\"center\">\r\n        <button mat-icon-button (click)=\"onStartClick(row.id)\">\r\n          <mat-icon>play_arrow</mat-icon>\r\n        </button>\r\n      </mat-cell>\r\n\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event)\"></mat-paginator>\r\n</div>\r\n\r\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {ProfileService} from \"../../../service/profileService/profile.service\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {PlayedGameComponent} from \"../../played-game/played-game.component\";\nimport {RejectMessage} from \"../../../models/reject-message\";\n\n@Component({\n  selector: 'app-reject-messages-dialog',\n  templateUrl: './reject-messages-dialog.component.html',\n  styleUrls: ['./reject-messages-dialog.component.css']\n})\nexport class RejectMessagesDialogComponent implements OnInit {\n  messages: RejectMessage[];\n  constructor(private profileService: ProfileService,\n              public dialogRef: MatDialogRef<PlayedGameComponent>,\n              @Inject(MAT_DIALOG_DATA) public quizId: number) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnInit(): void {\n    this.profileService.getRejectMessages(this.quizId).subscribe(\n      resp =>{\n        this.messages = resp;\n      console.log(resp);}\n    );\n  }\n\n}\n","<div class=\"card\" *ngFor=\"let mess of messages\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>{{mess.date | date:'shortTime'}}</mat-card-title>\n      <mat-card-subtitle>{{mess.date | date}}</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <p>\n        {{mess.comment}}\n      </p>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {Router} from '@angular/router';\r\nimport {Quiz} from '../../models/pending-quizzes.model';\r\nimport {PendingQuizzesService} from '../../service/pendingQuizzesService/pending-quizzes.service';\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {Subject} from \"rxjs\";\r\nimport {QuizCheckService} from \"../../service/quizCheckService/quiz-check.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-not-checked-quizzes',\r\n  templateUrl: './pending-quizzes.component.html',\r\n  styleUrls: ['./pending-quizzes.component.css']\r\n})\r\nexport class PendingQuizzesComponent implements OnInit {\r\n  pendingQuizzes: Quiz[];\r\n  displayedColumns: string[] = ['name', 'category', 'date', 'authorEmail', 'actions'];\r\n  dataSource: MatTableDataSource<Quiz>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  currentUserId: number;\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [10, 20, 30, 40, 50];\r\n  selected = 'Pending';\r\n  currentTable: string;\r\n\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  constructor(private quizService: PendingQuizzesService,\r\n              private router: Router,\r\n              private shareId: ShareIdService,\r\n              private quizCheckService: QuizCheckService) {\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n    this.setCurrentTable('Pending');\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        this.setPaginationParamDefault();\r\n        userSearch.length ==0 ? this.getAllPendingQuizzes() : this.filterRequest(userSearch);\r\n      });\r\n    this.getAllPendingQuizzes();\r\n  }\r\n\r\n  onPageChanged(e) {\r\n    this.pageIndex = e.pageIndex;\r\n    this.pageSize = e.pageSize;\r\n    if (this.currentTable != 'Pending' && this.currentTable != null) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.getAssignedQuizzes();\r\n    } else if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterRequest(this.userRequest);\r\n    } else {\r\n      this.getAllPendingQuizzes();\r\n    }\r\n  }\r\n\r\n  filterRequest(filterText: string) {\r\n    this.quizService.getFilteredPendingQuizzes(filterText, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.pendingQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 10;\r\n  }\r\n  getAllPendingQuizzes(){\r\n      this.quizService.getPendingQuizzes(this.pageSize, this.pageIndex).subscribe(resp => {\r\n        this.pendingQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n    });\r\n  }\r\n\r\n  getAssignedQuizzes(){\r\n    this.quizService.getAssignedQuizzes(this.currentUserId, this.pageSize, this.pageIndex).subscribe(resp => {\r\n      this.pendingQuizzes = resp.responceList;\r\n      this.length = resp.totalNumberOfElement;\r\n    });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  checkOut(id: string, email: string) {\r\n    this.shareId.setEmail(email);\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n\r\n  checkQuiz(quiz: Quiz) {\r\n    if (this.currentTable === 'Pending') {\r\n      this.quizCheckService.assignQuiz(quiz.id, JSON.parse(localStorage.getItem('currentUser')).id).subscribe\r\n      ((resp: any) => {\r\n          this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n            this.router.navigate(['checkquiz', quiz.id, {outlets: {quiznav: 'quizinfo'}}]);\r\n          });\r\n          localStorage.setItem('currentQuiz', JSON.stringify(quiz));\r\n        },\r\n        error => {\r\n          alert('Something wrong while assigning quiz');\r\n        }\r\n      );\r\n    }\r\n    else{\r\n      this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n        this.router.navigate(['checkquiz', quiz.id, {outlets: {quiznav: 'quizinfo'}}]);\r\n      });\r\n      localStorage.setItem('currentQuiz', JSON.stringify(quiz));\r\n    }\r\n  }\r\n\r\n  setCurrentTable(type: string) {\r\n    this.currentTable = type;\r\n  }\r\n}\r\n","<div fxLayout=\"column\">\r\n<div #maincontent fxFlex=\"71\" class=\"scroll main\">\r\n<div class=\"input\">\r\n  <mat-form-field  appearance=\"outline\">\r\n    <mat-label>Search quiz</mat-label>\r\n    <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n           (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n  </mat-form-field>\r\n<mat-form-field class=\"quiz_selection\">\r\n  <mat-label>Select</mat-label>\r\n  <mat-select [(value)]=\"selected\"  disableRipple>\r\n    <mat-option value=\"Pending\" (click)=\"setPaginationParamDefault(); setCurrentTable('Pending'); getAllPendingQuizzes()\" >Assignments</mat-option>\r\n    <mat-option value=\"Assigned\" (click)=\"setPaginationParamDefault(); setCurrentTable('Assigned'); getAssignedQuizzes()\">My Assignments</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n</div>\r\n<div class=\"mat-elevation-z8 w-75\">\r\n  <table mat-table [dataSource]=\"pendingQuizzes\" class=\"mat-elevation-z8\" width=\"100%\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Name</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n      <th mat-header-cell *matHeaderCellDef> Category</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.category}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"date\">\r\n      <th mat-header-cell *matHeaderCellDef> Date</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.date | date}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"authorEmail\">\r\n      <th mat-header-cell *matHeaderCellDef> Author Name</th>\r\n      <td mat-cell *matCellDef=\"let element\"><a class=\"nav-link\" routerLink=\"\"\r\n                                                (click)=\"checkOut(element.author, element.authorEmail)\">\r\n        {{element.authorName}} {{element.authorSurname}}</a></td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container  matColumnDef=\"actions\">\r\n      <th  mat-header-cell *matHeaderCellDef> Acting</th>\r\n      <mat-cell  *matCellDef=\"let row; let element;\">\r\n        <button  class=\"buttonsAction\" mat-stroked-button *ngIf=\"currentTable=='Pending'\" (click)=\"checkQuiz(element)\">Сheck</button>\r\n        <button  class=\"buttonsAction\" mat-stroked-button *ngIf=\"currentTable=='Assigned'\" (click)=\"checkQuiz(element)\">Continue</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n  </mat-paginator>\r\n</div>\r\n</div>\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {PlayedGameComponent} from \"../played-game.component\";\r\nimport {ProfileService} from \"../../../service/profileService/profile.service\";\r\nimport {Player} from \"../../../models/game.model\";\r\n\r\n@Component({\r\n  selector: 'app-game-result-dialog',\r\n  templateUrl: './game-result-dialog.component.html',\r\n  styleUrls: ['./game-result-dialog.component.css']\r\n})\r\nexport class GameResultDialogComponent implements OnInit {\r\n  players: Player[];\r\n  constructor(private profileService: ProfileService,\r\n    public dialogRef: MatDialogRef<PlayedGameComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public gameId: number) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.profileService.getGamesResult(this.gameId).subscribe(\r\n      resp =>\r\n        this.players = resp\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","<h1 mat-dialog-title>\r\n  Game result\r\n</h1>\r\n<div mat-dialog-content>\r\n  <mat-list role=\"list\" *ngFor=\"let player of players; let indexOfelement=index;\">\r\n    <mat-list-item role=\"listitem\">{{indexOfelement+1}} {{player.userName}}  {{player.userScore}}</mat-list-item>\r\n\r\n  </mat-list>\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {Subject} from \"rxjs\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {GameDto} from \"../../models/game-dto\";\r\nimport {MatDialog} from \"@angular/material/dialog\";\r\nimport {GameResultDialogComponent} from \"./game-result-dialog/game-result-dialog.component\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-played-game',\r\n  templateUrl: './played-game.component.html',\r\n  styleUrls: ['./played-game.component.css']\r\n})\r\nexport class PlayedGameComponent implements OnInit {\r\n  playedGame: GameDto[];\r\n  displayedColumns: string[] = ['name', 'date', 'score'];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  sortDirection = undefined;\r\n\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [9, 18, 27];\r\n\r\n  constructor(private profileService: ProfileService,\r\n              public dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n\r\n    this.uploadPlayedGames();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.uploadPlayedGames()\r\n        } else {\r\n          userSearch.length ==0 ? this.uploadPlayedGames() : this.uploadPlayedGames(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 9;\r\n  }\r\n\r\n  uploadPlayedGames(userSearch?: string){\r\n    this.profileService.getPlayedGames(this.pageSize, this.pageIndex, this.sortDirection, userSearch).subscribe(resp => {\r\n      this.playedGame = resp.responceList;\r\n      this.length = resp.totalNumberOfElement;\r\n    });\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  choseRequest() {\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.uploadPlayedGames(this.userRequest);\r\n    }else {\r\n      this.uploadPlayedGames();\r\n    }\r\n  }\r\n\r\n  sortPlayedGames($event) {\r\n    this.sortDirection = $event.direction==''? undefined : $event;\r\n    this.setPaginationParamDefault();\r\n    this.choseRequest();\r\n  }\r\n\r\n  openDialog(id: number) {\r\n    this.dialog.open(GameResultDialogComponent, {\r\n      data: id\r\n    });\r\n  }\r\n\r\n}\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search game</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n\r\n<br>\r\n<div id=\"table\" class=\"mat-elevation-z8\">\r\n  <table mat-table  [dataSource]=\"playedGame\" matSort class=\"mat-elevation-z8\" (matSortChange) = \"sortPlayedGames($event)\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n      <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">{{element.quizName}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"date\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\r\n      <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">{{element.date | date}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"score\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Score</th>\r\n      <td mat-cell *matCellDef=\"let element\" (click)=\"openDialog(element.id)\">{{element.personalScore}}</td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event)\"></mat-paginator>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\nimport {Role} from '../../models/role.enum';\r\n\r\n\r\n@Component({\r\n  selector: 'app-profile-navigation',\r\n  templateUrl: './profile-navigation.component.html',\r\n  styleUrls: ['./profile-navigation.component.css']\r\n})\r\nexport class ProfileNavigationComponent implements OnInit {\r\n  currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n  roleUs: Role;\r\n  public isAdmin = false;\r\n  id: any;\r\n\r\n  constructor(private shareId: ShareIdService) {\r\n    this.id = shareId.shareId();\r\n    this.roleUs = JSON.parse(localStorage.getItem('currentUser')).role;\r\n  }\r\n  adminCheck(){\r\n    if (this.roleUs.toString() !== Role[Role.USER]){\r\n      this.isAdmin = true;\r\n    }\r\n  }\r\n  ngOnInit(): void {\r\n    this.id = this.shareId.shareId();\r\n    this.adminCheck();\r\n  }\r\n\r\n}\r\n","<nav mat-tab-nav-bar *ngIf=\"currentUser.id == id\">\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {profilenav: 'profinfo'}}]\"\r\n     routerLinkActive #myProfile=\"routerLinkActive\" [active]=\"myProfile.isActive\">My Profile</a>\r\n  <a mat-tab-link *ngIf=\"!isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'friends'}}]\"\r\n     routerLinkActive #myFriends=\"routerLinkActive\" [active]=\"myFriends.isActive\">My friends</a>\r\n  <a mat-tab-link *ngIf=\"!isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'mygames'}}]\"\r\n     routerLinkActive #myQuizzes=\"routerLinkActive\" [active]=\"myQuizzes.isActive\">My Quizzes</a>\r\n  <a mat-tab-link *ngIf=\"!isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'favorite'}}]\"\r\n     routerLinkActive #favorite=\"routerLinkActive\" [active]=\"favorite.isActive\">Favorite</a>\r\n  <a mat-tab-link *ngIf=\"!isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'played'}}]\"\r\n     routerLinkActive #games=\"routerLinkActive\" [active]=\"games.isActive\">Played games</a>\r\n  <a mat-tab-link *ngIf=\"isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'pendingQuizzes'}}]\"\r\n     routerLinkActive #quizzes=\"routerLinkActive\" [active]=\"quizzes.isActive\">Quizzes</a>\r\n  <a mat-tab-link *ngIf=\"isAdmin\" [routerLink]=\"[{outlets: {profilenav: 'adminUsers'}}]\"\r\n     routerLinkActive #admins=\"routerLinkActive\" [active]=\"admins.isActive\">Admin users</a>\r\n</nav>\r\n\r\n","import {Component, Input, OnInit, Output} from '@angular/core';\r\nimport {ActivatedRoute, Router, RoutesRecognized} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {ShareIdService} from '../service/profileService/share-id.service';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  private subscription: Subscription;\r\n  id: string;\r\n  constructor(private activateRoute: ActivatedRoute,\r\n              private router: Router,\r\n              private shareId: ShareIdService) {\r\n    this.subscription = this.activateRoute.params.subscribe(\r\n      params => {\r\n        this.id = params.id;\r\n      }\r\n    );\r\n    this.shareId.setId(this.id);\r\n    // this.router.navigate([{outlets: {profilenav: 'profinfo'}}]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\" >\r\n  <div id=\"leftbar\" fxFlex=\"20\">\r\n    <app-left-bar></app-left-bar>\r\n  </div>\r\n  <div fxFlex=\"50\">\r\n    <div id=\"navigation\">\r\n      <app-profile-navigation ></app-profile-navigation>\r\n    </div>\r\n\r\n    <router-outlet name=\"profilenav\"></router-outlet>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport { User } from \"../../models/user\";\r\nimport { ProfileService } from \"../../service/profileService/profile.service\";\r\nimport { ShareIdService } from \"../../service/profileService/share-id.service\";\r\nimport { PlatformLocation } from \"@angular/common\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FormControl } from \"@angular/forms\";\r\nimport {Role} from '../../models/role.enum';\r\nimport {QuizCheckService} from \"../../service/quizCheckService/quiz-check.service\";\r\nimport {Quiz} from \"../../models/pending-quizzes.model\";\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {QuizService} from \"../../service/quizService/quiz.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-information',\r\n  templateUrl: './user-information.component.html',\r\n  styleUrls: ['./user-information.component.css']\r\n})\r\n\r\nexport class UserInformationComponent implements OnInit {\r\n  floatLabelControl = new FormControl('auto');\r\n  public profile: User;\r\n  public isEditForm = false;\r\n  currentUserId: string;\r\n  id: string;\r\n  roleUs: Role;\r\n  public isAdmin = false;\r\n  public isModerator = false;\r\n  public isSuperAdmin = false;\r\n  public isUser = false;\r\n  assignedQuizzes: Quiz[];\r\n  displayedColumns: string[] = ['name', 'category', 'date', 'actions'];\r\n  dataSource: MatTableDataSource<Quiz>;\r\n\r\n  constructor(private profileService: ProfileService,\r\n              private shareId: ShareIdService,\r\n              private location: PlatformLocation,\r\n              private router: Router,\r\n              private quizCheckService: QuizCheckService,\r\n              private quizService: QuizService) {\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n    this.id = shareId.shareId();\r\n    this.shareId.setEmail(JSON.parse(localStorage.getItem('currentUser')).email);\r\n    this.roleUs = JSON.parse(localStorage.getItem('currentUser')).role;\r\n\r\n  }\r\n\r\n  adminCheck() {\r\n    switch (this.roleUs.toString()) {\r\n      case Role[Role.ADMIN]:\r\n        this.isAdmin = true;\r\n        break;\r\n      case Role[Role.MODERATOR]:\r\n        this.isModerator = true;\r\n        break;\r\n      case Role[Role.SUPER_ADMIN]:\r\n        this.isSuperAdmin = true;\r\n        break;\r\n      default:\r\n        this.isUser = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getProfile(this.id);\r\n    this.adminCheck();\r\n    this.location.onPopState(() => {\r\n      this.shareId.setId(this.currentUserId);\r\n      this.shareId.setEmail(JSON.parse(localStorage.getItem('currentUser')).email);\r\n\r\n      this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n        this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'profinfo'}}]);\r\n      });\r\n    });\r\n    this.getAssignedQuizzes();\r\n  }\r\n\r\n  closeEditForm() {\r\n    this.isEditForm = false;\r\n  }\r\n\r\n  ngSubmit() {\r\n    if (this.id === this.currentUserId) {\r\n      this.saveProfile();\r\n    } else {\r\n      this.updateAdminUser();\r\n    }\r\n    this.closeEditForm();\r\n  }\r\n\r\n  public getProfile(id: string) {\r\n    this.profileService.getProfile(id).subscribe(\r\n      (resp: any) => {\r\n        this.adminCheck();\r\n        this.profile = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert('Something wrong with downloading profile');\r\n      }\r\n    );\r\n  }\r\n\r\n  updateAdminUser() {\r\n    this.profile.id = this.id;\r\n    this.profileService.updateAdminUser(this.profile).subscribe(\r\n      (resp: any) => {\r\n        this.profile = resp;\r\n      },\r\n      error => {\r\n        alert('Something wrong while updating profile');\r\n      }\r\n    );\r\n  }\r\n\r\n  saveProfile() {\r\n    this.profileService.updateProfile(this.profile).subscribe(\r\n      (resp: any) => {\r\n        this.profile = resp;\r\n      },\r\n      error => {\r\n        alert('Something wrong while updating profile');\r\n      }\r\n    );\r\n  }\r\n\r\n  getAssignedQuizzes() {\r\n    this.profileService.getAssignedQuizzes(this.id).subscribe(resp => {\r\n      this.assignedQuizzes = resp;\r\n    });\r\n  }\r\n  unsignModeratorQuiz(id) {\r\n    this.quizCheckService.unsignQuiz(id).subscribe(\r\n      (resp: any) => {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['profile', this.id, {outlets: {profilenav: 'profinfo'}}]);\r\n        });\r\n      },\r\n      error => {\r\n        alert('Something wrong while unsign');\r\n      }\r\n    );\r\n  }\r\n  unsignAllModeratorQuiz(id) {\r\n      this.quizService.unsignAllQuiz(id).subscribe(\r\n        (resp: any) => {\r\n          this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n            this.router.navigate(['profile', this.id, {outlets: {profilenav: 'profinfo'}}]);\r\n          });\r\n        },\r\n        error => {\r\n          alert('Something wrong while unsign');\r\n        }\r\n      );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","<div *ngIf=\"profile\">\r\n<div *ngIf=\"!isEditForm\">\r\n  <span>\r\n    <p>Name: {{profile?.name}}</p>\r\n  </span>\r\n  <p>Surname: {{profile?.surname}}</p>\r\n  <p>Gender: {{profile?.gender}}</p>\r\n  <p>Birthdate: {{profile?.birthdate | date}}</p>\r\n  <p>City: {{profile?.city}}</p>\r\n  <p>About me: {{profile?.about}}</p>\r\n  <p *ngIf=\"!isUser\">Role: {{profile?.role}} </p>\r\n  <div (click)=\"isEditForm=true\">\r\n    <div>\r\n      <button mat-raised-button *ngIf=\"id==currentUserId\">Edit profile</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<div *ngIf=\"isEditForm\">\r\n  <form (ngSubmit)=\"ngSubmit()\">\r\n    <div>\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Name</mat-label>\r\n        <input name=\"name\" matInput placeholder=\"Name\" [(ngModel)]=\"profile.name\" />\r\n      </mat-form-field>\r\n      <br>\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Surname</mat-label>\r\n        <input name=\"surname\" matInput placeholder=\"Name\" [(ngModel)]=\"profile.surname\" />\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-radio-group [(ngModel)]=\"profile.gender\" [formControl]=\"floatLabelControl\">\r\n        <mat-label>Gender</mat-label>\r\n        <br>\r\n        <br>\r\n        <mat-radio-button value=\"MALE\">Male</mat-radio-button>\r\n        <mat-radio-button value=\"FEMALE\">Female</mat-radio-button>\r\n        <mat-radio-button value=\"NOT_MENTIONED\">Not mentioned</mat-radio-button>\r\n      </mat-radio-group>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Birtdate</mat-label>\r\n        <input type=\"date\" name=\"birthdate\" matInput placeholder=\"Birthdate\" [(ngModel)]=\"profile.birthdate\" />\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>City</mat-label>\r\n        <input name=\"city\" matInput placeholder=\"City\" [(ngModel)]=\"profile.city\" />\r\n      </mat-form-field>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Textarea</mat-label>\r\n        <textarea matInput name=\"about\" placeholder=\"About\" [(ngModel)]=\"profile.about\"></textarea>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\" class=\"width-45\">Submit</button>\r\n\r\n    </div>\r\n  </form>\r\n  <br>\r\n  <button mat-raised-button (click)=\"closeEditForm()\" class=\"width-45\">Cancel</button>\r\n</div>\r\n\r\n<div class=\"mat-elevation-z8 w-75\" *ngIf=\"profile.role.toString() == 'MODERATOR' && assignedQuizzes!=null\">\r\n  <h2 align=\"center\">Moderator`s assignments</h2>\r\n  <table mat-table [dataSource]=\"assignedQuizzes\" class=\"mat-elevation-z8\" width=\"100%\">\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Name</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n      <th mat-header-cell *matHeaderCellDef> Category</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.category}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"date\">\r\n      <th mat-header-cell *matHeaderCellDef> Date</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.date | date}}</td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container  matColumnDef=\"actions\">\r\n      <th  mat-header-cell *matHeaderCellDef> Acting</th>\r\n      <mat-cell  *matCellDef=\"let row; let element;\">\r\n        <button  class=\"buttonsAction\" mat-stroked-button (click)=\"unsignModeratorQuiz(element.id)\">Unasign</button>\r\n      </mat-cell>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <button  class=\"buttonsAction\" mat-stroked-button (click)=\"unsignAllModeratorQuiz(profile.id)\">Unsign All</button>\r\n</div>\r\n</div>\r\n\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { NewQuizService } from './../../service/newQuizService/new-quiz.service';\r\nimport { QuestionComponent } from '../question/question.component';\r\nimport { Component, OnInit, ViewChildren, QueryList } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Question, QuestionType } from '../../models/question.model';\r\nimport { Quiz } from '../../models/add-quiz.model';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-add-questions',\r\n  templateUrl: './add-questions.component.html',\r\n  styleUrls: ['./add-questions.component.css']\r\n})\r\nexport class AddQuestionsComponent implements OnInit {\r\n  @ViewChildren(QuestionComponent) questionComponents!: QueryList<QuestionComponent>;\r\n\r\n  quiz: Quiz;\r\n  image: File;\r\n  questions: Question[] = [];\r\n\r\n  constructor(private router: Router,\r\n    private newQuizService: NewQuizService,\r\n    private imageService: ImageService) {\r\n    this.quiz = this.router.getCurrentNavigation().extras.state.quiz;\r\n    this.image = this.router.getCurrentNavigation().extras.state.image;\r\n    this.questions = this.quiz.questions;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  addQuestion() {\r\n    this.questions.push({\r\n      id: null,\r\n      quizId: null,\r\n      type: \"Option\",\r\n      text: '',\r\n      active: true,\r\n      answerList: null,\r\n      image: null,\r\n      changed: true,\r\n      deleted: false\r\n    });\r\n  }\r\n\r\n  removeQuestion(i: number) {\r\n    if (this.questions.filter(item => !item.deleted).length > 1) {\r\n      if (this.questions[i].id != null) {\r\n        this.questions[i].deleted = true;\r\n      } else {\r\n        this.questions.splice(i, 1);\r\n      }\r\n    }\r\n    else {\r\n      alert(\"Can't delete the only one question\");\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    const observableBatch: Observable<Question>[] = [];\r\n\r\n\r\n    if (this.isValid()) {\r\n      console.log(\"submit\");\r\n      this.questionComponents.toArray().forEach(el => {\r\n        console.log(el.question);\r\n        observableBatch.push(el.getData());\r\n      });\r\n\r\n      forkJoin(observableBatch).pipe(\r\n        map(resp => this.quiz.questions = resp),\r\n        mergeMap(\r\n          _ => this.imageService.saveImage(this.image).pipe(\r\n            map(resp => { if (resp != \"\") this.quiz.image = resp; }),\r\n            mergeMap(_ => {\r\n              console.log(this.quiz);\r\n              return this.newQuizService.postQuiz(this.quiz);\r\n            })\r\n          )\r\n        )\r\n      ).subscribe(\r\n        _ => this.router.navigateByUrl('/submitted_quiz'),\r\n        err => {\r\n          alert(err.message);\r\n          console.log(err)\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      alert(\"Error. Check your questions\");\r\n    }\r\n  }\r\n\r\n  isValid(): boolean {\r\n    let valid = true;\r\n\r\n    this.questionComponents.toArray().forEach(\r\n      value => {\r\n        if (!value.isValid()) {\r\n          valid = false;\r\n        }\r\n      }\r\n    );\r\n\r\n    return valid;\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n        <mat-card-title>\r\n            <h2>Quiz: {{quiz.name}}</h2>\r\n        </mat-card-title>\r\n        <mat-card-content>\r\n            <mat-accordion *ngFor=\"let question of questions; let i=index\">\r\n                <mat-expansion-panel [ngClass]=\"{'hidden': question.deleted}\">\r\n                    <mat-expansion-panel-header>\r\n                        <mat-panel-title fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\">\r\n                            <h3>Question</h3>\r\n                        </mat-panel-title>\r\n                        <mat-panel-description>\r\n                            {{question.text?question.text:\"Add question info\"}}\r\n                        </mat-panel-description>\r\n                        <button mat-raised-button class=\"delete-button\" (click)=\"removeQuestion(i)\" color=\"warn\">\r\n                            Delete\r\n                        </button>\r\n                    </mat-expansion-panel-header>\r\n                    <app-question [question]=\"question\"></app-question>\r\n                </mat-expansion-panel>\r\n            </mat-accordion>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n                <button mat-fab (click)=\"addQuestion()\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button mat-raised-button class=\"fab\" type=\"submit\" (click)=\"onSubmit()\">Submit</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { Answer } from '../../models/answer.model';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { ValidatorFn, ValidationErrors, FormArray } from '@angular/forms';\r\nimport { Observable, forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-answer',\r\n  templateUrl: './answer.component.html',\r\n  styleUrls: ['./answer.component.css']\r\n})\r\nexport class AnswerComponent implements OnInit {\r\n  submitted: boolean = false;\r\n\r\n  @Input() answer: Answer[] = [];\r\n  images: File[] = [];\r\n\r\n  questionId: number;\r\n\r\n  constructor(private imageService: ImageService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getData(): Observable<Answer[]> {\r\n    return null;\r\n  }\r\n\r\n  getImages(): void {\r\n\r\n  }\r\n\r\n  saveImages(): Observable<any> {\r\n    let observableBatch = [];\r\n\r\n    this.answer.forEach(\r\n      (_, index) => {\r\n        observableBatch.push(\r\n          this.imageService.saveImage(this.images[index])\r\n        );\r\n      }\r\n    );\r\n\r\n    return forkJoin(observableBatch);\r\n  }\r\n}\r\n\r\nexport function SequenceValidator(): ValidatorFn {\r\n  return (formArray: FormArray): ValidationErrors => {\r\n    for (var _i = 1; _i < formArray.controls.length; _i++) {\r\n      let previous = formArray.controls[_i - 1];\r\n      let current = formArray.controls[_i];\r\n\r\n      if (current.get('text').value !== '' && previous.get('text').value === '') {\r\n        previous.setErrors({ mustExist: true });\r\n        return;\r\n      } else {\r\n        previous.setErrors(null);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}","<p>\r\n  answer works!\r\n</p>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { AnswerService } from '../../service/answerService/answer.service';\r\nimport { AnswerComponent } from '../answer/answer.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Answer } from '../../models/answer.model';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-boolean-answer',\r\n  templateUrl: './boolean-answer.component.html',\r\n  styleUrls: ['./boolean-answer.component.css']\r\n})\r\nexport class BooleanAnswerComponent extends AnswerComponent implements OnInit {\r\n  checkBox: boolean = false;\r\n\r\n  constructor(imageService: ImageService) {\r\n    super(imageService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let result: Answer = {\r\n      id: null,\r\n      questionId: 0,\r\n      text: \"\",\r\n      correct: true,\r\n      nextAnswerId: null,\r\n      image: null,\r\n      changed: true,\r\n      deleted: false\r\n    };\r\n    this.answer.push(result);\r\n  }\r\n\r\n  getData(): Observable<Answer[]> {\r\n    this.answer[0].questionId = this.questionId;\r\n    this.answer[0].text = this.checkBox ? \"true\" : \"false\";\r\n\r\n    return of(this.answer);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <input type=\"checkbox\" id=\"checkbox\" [ngModel]=\"checkBox\" (change)=\"checkBox=!checkBox\" ngDefaultControl>\r\n    <label for=\"checkbox\">Is question true?</label>\r\n</div>\r\n","import { CurrentUserService } from '../../service/current-user.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { CategoryService } from '../../service/categoryService/category.service';\r\nimport { Category } from '../../models/category.model';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Quiz } from '../../models/add-quiz.model';\r\nimport { StatusType } from '../../models/quiz.model';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { Tag } from '../../models/tag.model';\r\nimport { ImageUploadComponent } from 'src/app/image-upload/image-upload.component';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-quiz',\r\n  templateUrl: './new-quiz.component.html',\r\n  styleUrls: ['./new-quiz.component.css']\r\n})\r\nexport class NewQuizComponent implements OnInit {\r\n  @ViewChild('chipList') chipList: ElementRef<HTMLInputElement>;\r\n  @ViewChild(ImageUploadComponent) imageComponent: ImageUploadComponent;\r\n\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  tags: Tag[] = [];\r\n\r\n  quizForm: FormGroup;\r\n  submitted: boolean = false;\r\n  categories: Category[];\r\n\r\n\r\n  quiz: Quiz = {\r\n    id: null,\r\n    name: \"\",\r\n    author: parseInt(this.currentUserService.getCurrentUser().id),\r\n    category_id: 1,\r\n    date: new Date().toISOString(),\r\n    description: \"\",\r\n    status: StatusType.PENDING.toString(),\r\n    modification_time: new Date().toISOString(),\r\n    image: null,\r\n    questions: [],\r\n    tags: [],\r\n    changed: true\r\n  };\r\n  image: File;\r\n\r\n  constructor(\r\n    private categoryService: CategoryService,\r\n    private formBuilder: FormBuilder,\r\n    private currentUserService: CurrentUserService,\r\n    private router: Router) {\r\n    if (this.router.getCurrentNavigation().extras.state?.quiz)\r\n      this.quiz = this.router.getCurrentNavigation().extras.state.quiz;\r\n    this.tags = this.quiz.tags;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCategories();\r\n\r\n    console.log(this.quiz);\r\n\r\n    this.quizForm = this.formBuilder.group({\r\n      name: [this.quiz.name, [Validators.required, Validators.maxLength]],\r\n      category: [],\r\n      description: [this.quiz.description, [Validators.maxLength]]\r\n    });\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    if ((value || '').trim() && !(this.tags.find(element => element.name == value.trim()))) {\r\n      this.tags.push({ id: null, name: value.trim() });\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  remove(fruit: Tag): void {\r\n    const index = this.tags.indexOf(fruit);\r\n\r\n    if (index >= 0) {\r\n      this.tags.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  loadCategories(): Observable<Category[]> {\r\n    return this.categoryService.getCategories().pipe(\r\n      map(resp => {\r\n        this.categories = resp;\r\n        if (this.quiz.id != null)\r\n          this.getCategory();\r\n        return this.categories;\r\n      })\r\n    );\r\n  }\r\n\r\n  getCategory() {\r\n    let category = null;\r\n    if (this.quiz.id) {\r\n      category = this.categories?.find(item => item.id == this.quiz.category_id);\r\n    } else {\r\n      category = this.categories[0];\r\n    }\r\n    this.quizForm.get('category').setValue(category);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    if (this.quizForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.getData()\r\n\r\n    this.saveQuiz();\r\n  }\r\n\r\n  saveQuiz(): void {\r\n    this.router.navigateByUrl('/add_questions', {\r\n      state: {\r\n        quiz: this.quiz,\r\n        image: this.image\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  getData(): void {\r\n    let input: Quiz = JSON.parse(JSON.stringify(this.quizForm.value));\r\n    this.quiz.name = input.name;\r\n    let category = this.quizForm.get('category').value;\r\n    this.quiz.category_id = category.id;\r\n    this.quiz.description = input.description;\r\n    this.quiz.status = this.quiz.status.toUpperCase();\r\n    this.image = this.imageComponent.selectedFile?.file;\r\n    this.quiz.tags = this.tags;\r\n    console.log(this.quiz);\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card>\r\n        <mat-card-title>\r\n            <h2>New Quiz</h2>\r\n        </mat-card-title>\r\n        <mat-card-content>\r\n            <div class=\"form-container\">\r\n                <form [formGroup]=\"quizForm\">\r\n\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter quiz name</mat-label>\r\n                        <input matInput #input maxlength=\"30\" formControlName=\"name\" placeholder=\"Quiz name\" required>\r\n                        <mat-hint align=\"end\">{{input.value?.length || 0}}/30</mat-hint>\r\n                        <mat-error\r\n                            *ngIf=\"quizForm.get('name').errors?.required && (submitted || quizForm.get('name').touched || quizForm.get('name').dirty)\">\r\n                            You must enter quiz name </mat-error>\r\n                        <mat-error *ngIf=\"quizForm.get('name').errors?.maxlength\">Quiz name can be max 30 characters\r\n                            long.\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <app-image-upload class=\"form-field\"></app-image-upload>\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Select category</mat-label>\r\n                        <mat-select formControlName=\"category\" value=\"questionTypes[0]\">\r\n                            <mat-option *ngFor='let category of categories?categories:(loadCategories() |async)'\r\n                                [value]=\"category\">\r\n                                {{category.name | titlecase}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"form-field\">\r\n                        <mat-chip-list #chipList aria-label=\"Tag selection\">\r\n                            <mat-chip *ngFor=\"let tag of tags\" [selectable]=\"selectable\" [removable]=\"removable\"\r\n                                (removed)=\"remove(tag)\">\r\n                                {{tag.name}}\r\n                                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n                            </mat-chip>\r\n                            <input placeholder=\"Add tag...\" [matChipInputFor]=\"chipList\"\r\n                                [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\r\n                                (matChipInputTokenEnd)=\"add($event)\">\r\n                        </mat-chip-list>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"form-field\">\r\n                        <mat-label>Description</mat-label>\r\n                        <textarea matInput class=\"form-control\" formControlName=\"description\"\r\n                            placeholder=\"Description\"></textarea>\r\n                        <mat-error *ngIf=\"quizForm.get('name').errors?.maxlength\">Description can be max 360 characters\r\n                            long.\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </form>\r\n            </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button mat-raised-button type=\"submit\" (click)=\"onSubmit()\">Next</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { AnswerComponent, SequenceValidator } from '../answer/answer.component';\r\nimport { Component, OnInit, ViewChildren, QueryList, AfterViewInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroup, FormArray, Validators, FormControl, FormBuilder } from '@angular/forms';\r\nimport { ImageUploadComponent } from '../../image-upload/image-upload.component';\r\nimport { Answer } from 'src/app/models/answer.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-optional-answer',\r\n  templateUrl: './optional-answer.component.html',\r\n  styleUrls: ['./optional-answer.component.css']\r\n})\r\nexport class OptionalAnswerComponent extends AnswerComponent implements OnInit {\r\n  @ViewChildren(ImageUploadComponent) imageComponents!: QueryList<ImageUploadComponent>;\r\n\r\n  answerForm: FormGroup;\r\n  items: FormArray;\r\n\r\n  maxAnswer = 4;\r\n  minRequired = 2;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    imageService: ImageService) {\r\n    super(imageService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.answerForm = new FormGroup({\r\n      items: this.formBuilder.array([])\r\n    });\r\n    for (var _i = 0; _i < this.maxAnswer; _i++) {\r\n      this.answer.push({\r\n        id: null,\r\n        questionId: 0,\r\n        text: \"\",\r\n        correct: false,\r\n        nextAnswerId: null,\r\n        image: null,\r\n        changed: true,\r\n        deleted: false\r\n      });\r\n      const correctControl = new FormControl(this.answer[_i].correct, []);\r\n      const textControl = new FormControl(this.answer[_i].text, []);\r\n      if (_i < this.minRequired) {\r\n        textControl.setValidators([Validators.required, Validators.maxLength(30)]);\r\n      }\r\n      this.items = this.answerForm.get('items') as FormArray;\r\n      this.items.push(\r\n        this.formBuilder.group({\r\n          isCorrect: correctControl,\r\n          text: textControl\r\n        })\r\n      )\r\n    }\r\n    this.answerForm.get('items').setValidators([SequenceValidator()]);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.items.setValidators(SequenceValidator());\r\n    this.items.markAsTouched();\r\n    return this.answerForm.valid;\r\n  }\r\n\r\n  getData(): Observable<Answer[]> {\r\n    this.getImages();\r\n\r\n    const items = this.answerForm.get('items') as FormArray;\r\n    for (var i = 0; i < this.answer.length; i++) {\r\n      const current = items.at(i);\r\n      if (this.answer[i].id != null && current.dirty) {\r\n        this.answer[i].changed = true;\r\n      }\r\n\r\n      const newText = current.get('text').value;\r\n\r\n      if (this.answer[i].text != \"\" && newText == \"\") {\r\n        this.answer[i].deleted = true;\r\n      }\r\n\r\n      this.answer[i].correct = current.get('isCorrect').value;\r\n      this.answer[i].text = newText;\r\n\r\n      if (this.answer[i].text === \"\" || this.answer[i].text == null)\r\n        break;\r\n    }\r\n\r\n    return this.saveImages().pipe(\r\n      map((resp) => {\r\n        for (let i in resp) {\r\n          if (resp[i] !== \"\") {\r\n            this.answer[i].image = resp[i];\r\n          }\r\n        }\r\n      }),\r\n      mergeMap(_ => {\r\n        const result = [];\r\n        for (let i of this.answer) {\r\n          if (i.text || i.deleted) {\r\n            result.push(i);\r\n          }\r\n        }\r\n        return of(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  getImages(): void {\r\n    this.imageComponents.forEach(image => {\r\n      if (image.selectedFile != null) {\r\n        this.images.push(image.selectedFile?.file);\r\n      } else {\r\n        this.images.push(null);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <form [formGroup]=\"answerForm\">\r\n        <ol formArrayName=\"items\">\r\n            <li *ngFor=\"let item of items.controls; let i=index\">\r\n                <div [formGroupName]=\"i\">\r\n                    <div>\r\n                        <input id=\"checkbox\" type=\"checkbox\" formControlName=\"isCorrect\" color=\"primary\">\r\n                        <label for=\"checkbox\">Check if answer is correct</label>\r\n                    </div>\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter answer name</mat-label>\r\n                        <input matInput #input maxlength=\"30\" formControlName=\"text\" placeholder=\"Quiz name\">\r\n                        <mat-error\r\n                            *ngIf=\"items.controls[i].get('text').errors?.required && (submitted || items.controls[i].get('text').touched || items.controls[i].get('text').dirty)\">\r\n                            Should have at least two answers.\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].get('text').errors?.maxlength\"> Answer can be max\r\n                            30 characters long. </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].errors?.mustExist\">Add text. Next\r\n                            answer is not empty. </mat-error>\r\n                    </mat-form-field>\r\n                    <app-image-upload></app-image-upload>\r\n                    <mat-divider *ngIf=\"i!=items.controls.length-1\"></mat-divider>\r\n                </div>\r\n            </li>\r\n        </ol>\r\n    </form>\r\n</div>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { Validators } from '@angular/forms';\r\nimport { SequenceAnswerComponent } from './../sequence-answer/sequence-answer.component';\r\nimport { StringAnswerComponent } from './../string-answer/string-answer.component';\r\nimport { BooleanAnswerComponent } from '../boolean-answer/boolean-answer.component';\r\nimport { OptionalAnswerComponent } from '../optional-answer/optional-answer.component';\r\nimport { AnswerComponent } from '../answer/answer.component';\r\nimport { QuestionService } from '../../service/questionService/question.service';\r\nimport { Question, QuestionType } from '../../models/question.model';\r\nimport { Component, OnInit, ComponentFactoryResolver, ViewChild, ViewContainerRef, AfterViewInit, ComponentRef, ComponentFactory, Input } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ImageUploadComponent } from '../../image-upload/image-upload.component';\r\nimport { TitleCasePipe } from '@angular/common';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { forkJoin, of, Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit, AfterViewInit {\r\n  quizId: number;\r\n  submitted: boolean = false;\r\n  send: boolean = false;\r\n\r\n  questionForm: FormGroup;\r\n  questionTypes: string[] = [];\r\n  componentRef: ComponentRef<AnswerComponent>\r\n\r\n  @Input() question: Question = {\r\n    id: null,\r\n    quizId: null,\r\n    type: \"Option\",\r\n    text: \"\",\r\n    active: true,\r\n    answerList: [],\r\n    image: null,\r\n    changed: true,\r\n    deleted: false\r\n  };\r\n  image: File = null;\r\n\r\n  @ViewChild('dynamicComponent', { read: ViewContainerRef }) answerHost;\r\n  @ViewChild(ImageUploadComponent) imageComponent: ImageUploadComponent;\r\n\r\n  constructor(public questionService: QuestionService,\r\n    private formBuilder: FormBuilder,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private imageService: ImageService) {\r\n    Object.keys(QuestionType).forEach(\r\n      value => this.questionTypes.push(value)\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.questionForm = this.formBuilder.group({\r\n      text: [this.question.text, [Validators.required, Validators.maxLength(360)]],\r\n      type: [this.question.type]\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.questionForm.get('type').setValue(this.question.type);\r\n    this.loadComponent(this.question.type);\r\n  }\r\n\r\n  loadComponent(value: string) {\r\n    let titleCasePipe = new TitleCasePipe();\r\n    value = titleCasePipe.transform(value);\r\n    var componentFactory: ComponentFactory<AnswerComponent>;\r\n    switch (value) {\r\n      case QuestionType.OPTION:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(OptionalAnswerComponent);\r\n        break;\r\n      case QuestionType.BOOLEAN:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(BooleanAnswerComponent);\r\n        break;\r\n      case QuestionType.ANSWER:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(StringAnswerComponent);\r\n        break;\r\n      case QuestionType.SEQUENCE:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(SequenceAnswerComponent);\r\n        break;\r\n    }\r\n\r\n    this.answerHost.clear();\r\n    this.componentRef = this.answerHost.createComponent(componentFactory);\r\n    if (this.question.id) {\r\n      if (value === QuestionType.OPTION || value === QuestionType.SEQUENCE) {\r\n        while (this.question.answerList.length < 4) {\r\n          this.question.answerList.push({\r\n            id: null,\r\n            questionId: 0,\r\n            text: \"\",\r\n            correct: false,\r\n            nextAnswerId: null,\r\n            image: null,\r\n            changed: true,\r\n            deleted: true\r\n          });\r\n        }\r\n      }\r\n      this.componentRef.instance.answer = this.question.answerList;\r\n    }\r\n    this.componentRef.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.questionForm.markAsTouched();\r\n    return this.questionForm.valid && this.componentRef.instance.isValid();\r\n  }\r\n\r\n  getData(): Observable<Question> {\r\n    this.question.quizId = this.quizId;\r\n    this.question.type = this.question.type.toUpperCase();\r\n    this.question.text = this.questionForm.get('text').value;\r\n    this.question.type = this.questionForm.get('type').value.toUpperCase();\r\n    this.question.answerList = this.componentRef.instance.answer;\r\n\r\n    return this.componentRef.instance.getData().pipe(\r\n      map(resp => { console.log(resp); this.question.answerList = resp; }),\r\n      mergeMap(_ => this.imageService.saveImage(this.imageComponent.selectedFile?.file).pipe(\r\n        map(resp => { if (resp != \"\") this.question.image = resp; }),\r\n        mergeMap(_ => of(this.question))\r\n      ))\r\n    );\r\n  }\r\n\r\n  onOptionSelected(value: string) {\r\n    console.log(value);\r\n    this.loadComponent(value);\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <form [formGroup]=\"questionForm\">\r\n        <mat-form-field class=\"form-field\">\r\n            <mat-label>Description</mat-label>\r\n            <textarea matInput id=\"text\" type=\"text\" formControlName=\"text\" class=\"form-control\" maxlength=\"360\"\r\n                required></textarea>\r\n            <mat-error\r\n                *ngIf=\"questionForm.get('text').errors?.required && (submitted ||questionForm.get('text').touched || questionForm.get('text').dirty)\"\r\n                class=\"alert alert-danger\">Question\r\n                cannot be empty. </mat-error>\r\n            <mat-error *ngIf=\"questionForm.get('text').errors?.maxlength\" class=\"alert alert-danger\">Question can be max\r\n                30 characters long.</mat-error>\r\n        </mat-form-field>\r\n        <app-image-upload> </app-image-upload>\r\n\r\n        <mat-form-field class=\"form-field\">\r\n            <mat-label>Answer type</mat-label>\r\n            <mat-select id=\"type\" formControlName=\"type\" class=\"form-control\"\r\n                (selectionChange)=\"onOptionSelected($event.value)\">\r\n                <mat-option *ngFor='let type of questionTypes' [value]=\"type\">\r\n                    {{type | titlecase}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <h3>Answers</h3>\r\n        <ng-template #dynamicComponent></ng-template>\r\n    </form>\r\n</div>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ImageUploadComponent } from '../../image-upload/image-upload.component';\r\nimport { Validators, FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { AnswerComponent, SequenceValidator } from '../answer/answer.component';\r\nimport { Component, OnInit, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\nimport { Answer } from 'src/app/models/answer.model';\r\n\r\n@Component({\r\n  selector: 'app-sequence-answer',\r\n  templateUrl: './sequence-answer.component.html',\r\n  styleUrls: ['./sequence-answer.component.css']\r\n})\r\nexport class SequenceAnswerComponent extends AnswerComponent implements OnInit {\r\n  @ViewChildren(ImageUploadComponent) imageComponents!: QueryList<ImageUploadComponent>;\r\n\r\n  answerForm: FormGroup;\r\n  items: FormArray;\r\n\r\n  maxAnswer = 4;\r\n  minRequired = 2;\r\n\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    imageService: ImageService) {\r\n    super(imageService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.answerForm = new FormGroup({\r\n      items: this.formBuilder.array([])\r\n    });\r\n    this.items = this.answerForm.get('items') as FormArray;\r\n    for (var _i = 0; _i < this.maxAnswer; _i++) {\r\n      this.answer.push({\r\n        id: null,\r\n        questionId: 0,\r\n        text: \"\",\r\n        correct: true,\r\n        nextAnswerId: null,\r\n        image: null,\r\n        changed: true,\r\n        deleted: false\r\n      });\r\n      const formControl = new FormControl(this.answer[_i].text, []);\r\n      if (_i < this.minRequired) {\r\n        formControl.setValidators([Validators.required, Validators.maxLength(30)]);\r\n      }\r\n      this.items = this.answerForm.get('items') as FormArray;\r\n      this.items.push(\r\n        this.formBuilder.group({\r\n          text: formControl\r\n        })\r\n      )\r\n    }\r\n    this.answerForm.get('items').setValidators([SequenceValidator()]);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.items.setValidators(SequenceValidator());\r\n    return this.answerForm.valid;\r\n  }\r\n\r\n  getData(): Observable<Answer[]> {\r\n    this.getImages();\r\n    for (var i = 0; i < this.answer.length; i++) {\r\n      if (this.answer[i].id != null && (this.answerForm.get('items') as FormArray).at(i).dirty) {\r\n        this.answer[i].changed = true;\r\n      }\r\n\r\n      const newText = (this.answerForm.get('items') as FormArray).at(i).get(\"text\").value;\r\n\r\n      if (this.answer[i].text != \"\" && newText == \"\") {\r\n        this.answer[i].deleted = true;\r\n      }\r\n\r\n      this.answer[i].text = newText;\r\n\r\n      if (this.answer[i].text === \"\" || this.answer[i].text == null)\r\n        break;\r\n    }\r\n\r\n    return this.saveImages().pipe(\r\n      map((resp) => {\r\n        for (let i in resp) {\r\n          if (resp[i] !== \"\") {\r\n            this.answer[i].image = resp[i];\r\n          }\r\n        }\r\n      }),\r\n      mergeMap(_ => {\r\n        const result = [];\r\n        for (let i of this.answer) {\r\n          if (i.text || i.deleted) {\r\n            result.push(i);\r\n          }\r\n        }\r\n        return of(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  getImages(): void {\r\n    this.imageComponents.forEach(image => {\r\n      if (image.selectedFile != null) {\r\n        this.images.push(image.selectedFile.file);\r\n      } else {\r\n        this.images.push(null);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <form [formGroup]=\"answerForm\">\r\n        <ol formArrayName=\"items\">\r\n            <li *ngFor=\"let item of items.controls; let i=index\">\r\n                <div [formGroupName]=\"i\">\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter answer name</mat-label>\r\n                        <input matInput class=\"form-control\" placeholder=\"Answer\" formControlName=\"text\">\r\n                        <mat-error\r\n                            *ngIf=\"items.controls[i].get('text').errors?.required && (submitted || items.controls[i].get('text').touched || items.controls[i].get('text').dirty)\"\r\n                            class=\"alert alert-danger\">Should have at\r\n                            least two answers.\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].get('text').errors?.maxlength\" class=\"alert alert-danger\">\r\n                            Answer\r\n                            can be max 30 characters long. </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].errors?.mustExist\" class=\"alert alert-danger\">Add text. Next\r\n                            answer is not empty. </mat-error>\r\n                    </mat-form-field>\r\n                    <app-image-upload></app-image-upload>\r\n                    <hr *ngIf=\"i!=items.controls.length-1\" class=\"my-4\">\r\n                </div>\r\n            </li>\r\n        </ol>\r\n    </form>\r\n</div>\r\n","import { ImageService } from './../../service/imageService/image.service';\r\nimport { Validators } from '@angular/forms';\r\nimport { AnswerComponent } from '../answer/answer.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Answer } from '../../models/answer.model';\r\nimport { AnswerService } from '../../service/answerService/answer.service';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-string-answer',\r\n  templateUrl: './string-answer.component.html',\r\n  styleUrls: ['./string-answer.component.css']\r\n})\r\nexport class StringAnswerComponent extends AnswerComponent implements OnInit {\r\n  text: FormControl;\r\n\r\n  constructor(imageService: ImageService) {\r\n    super(imageService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let result: Answer = {\r\n      id: null,\r\n      questionId: 0,\r\n      text: \"\",\r\n      correct: true,\r\n      nextAnswerId: null,\r\n      image: null,\r\n      changed: true,\r\n      deleted: false\r\n    };\r\n    this.answer.push(result);\r\n\r\n    this.text = new FormControl(\r\n      this.answer[0].text, Validators.required\r\n    );\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    return this.text.valid;\r\n  }\r\n\r\n  getData(): Observable<Answer[]> {\r\n    if (this.answer[0].id != null && this.text.dirty) {\r\n      this.answer[0].changed = true;\r\n    }\r\n    this.answer[0].text = this.text.value;\r\n\r\n    return of(this.answer);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <mat-form-field appearance=\"outline\">\r\n        <mat-label>Enter answer</mat-label>\r\n        <input matInput class=\"form-control\" placeholder=\"Answer\" aria-label=\"Answer\" aria-describedby=\"basic-addon1\"\r\n            [formControl]=\"text\" required>\r\n        <mat-error *ngIf=\"text.invalid && (submitted ||text.dirty || text.touched)\" class=\"alert alert-danger\">\r\n            <mat-error *ngIf=\"text.errors.required\">\r\n                Answer is required.\r\n            </mat-error>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Router} from \"@angular/router\";\r\nimport {CurrentUserService} from \"../../service/current-user.service\";\r\n\r\n@Component({\r\n  selector: 'app-submitted-quiz',\r\n  templateUrl: './submitted-quiz.component.html',\r\n  styleUrls: ['./submitted-quiz.component.css']\r\n})\r\nexport class SubmittedQuizComponent implements OnInit {\r\n\r\n  constructor(private router: Router,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  goToProfile() {\r\n    this.router.navigate(['profile', this.currentUserService.getCurrentUser().id, {outlets: {profilenav: 'profinfo'}}]);\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card>\r\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\r\n            <mat-icon fxFlexAlign=\"center\">done_outline</mat-icon>\r\n            <h3>Quiz successfully submitted!</h3>\r\n        </mat-card-content>\r\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n            <button mat-button target=\"_blank\" (click)=\"goToProfile()\">Go back to profile</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {QuizCheckModel} from '../../models/quiz-check.model';\r\nimport {ModeratorComment} from \"../../models/moderator-comment\";\r\nimport {QuizCheckService} from \"../../service/quizCheckService/quiz-check.service\";\r\nimport {StatusType} from \"../../models/status-type.enum\";\r\n\r\n@Component({\r\n  selector: 'app-question-check',\r\n  templateUrl: './question-check.component.html',\r\n  styleUrls: ['./question-check.component.css']\r\n})\r\nexport class QuestionCheckComponent implements OnInit {\r\n  public modComment: ModeratorComment;\r\n  public commentForm: FormGroup;\r\n  private subscription: Subscription;\r\n  quiz: QuizCheckModel;\r\n  id: string;\r\n  currentQuizId: number;\r\n  currentUserId: number;\r\n  checkedQuestions = [7];\r\n  comment: string;\r\n  submitted = false;\r\n  labelPosition = 'before';\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              private quizService: QuizCheckService,\r\n              private activateRoute: ActivatedRoute,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getQuiz(JSON.parse(localStorage.getItem('currentQuiz')).id);\r\n    this.commentForm = this.formBuilder.group({\r\n      comment: ['', [Validators.required, Validators.minLength(8)]],\r\n    });\r\n  }\r\n  public getQuiz(id: string){\r\n    this.quizService.getQuizById(id).subscribe(\r\n      (resp: any) => {\r\n        this.quiz = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert('Something wrong with downloading quiz');\r\n      }\r\n    );\r\n  }\r\n  activeQuiz() {\r\n    this.currentQuizId = JSON.parse(localStorage.getItem('currentQuiz')).id;\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n    this.unsignModeratorQuiz();\r\n    this.quizService.updateStatusQuiz(this.currentQuizId, StatusType.ACTIVE).subscribe(\r\n      (resp: any) => {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'pendingQuizzes'}}]);\r\n        });\r\n      },\r\n      error => {\r\n        alert('Something wrong while change active status');\r\n      }\r\n    );\r\n  }\r\n  checkCount(i: number) {\r\n    if (!this.checkedQuestions.includes(i)){\r\n      this.checkedQuestions.push(i);\r\n    }\r\n    else {\r\n      this.checkedQuestions.splice(this.checkedQuestions.indexOf(i), i);\r\n    }\r\n  }\r\n  allChecked(){\r\n    if ( this.checkedQuestions.length - 1  === this.quiz.questions.length){\r\n      return true;\r\n    }\r\n  }\r\n  leaveComment() {\r\n    this.currentQuizId = JSON.parse(localStorage.getItem('currentQuiz')).id;\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n    this.unsignModeratorQuiz();\r\n    const com = new ModeratorComment(this.currentQuizId, this.currentUserId, this.comment, new Date());\r\n    this.quizService.addComment(com).subscribe(\r\n      (resp: any) => {\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'pendingQuizzes'}}]);\r\n          alert('Comment sent successfully');\r\n        });\r\n      },\r\n      error => {\r\n        alert('Something wrong while leave comment');\r\n      }\r\n    );\r\n  }\r\n  unsignModeratorQuiz() {\r\n    this.quizService.unsignQuiz(this.currentQuizId).subscribe(\r\n      (resp: any) => {\r\n      },\r\n    error => {\r\n      alert('Something wrong while unsign');\r\n    }\r\n    );\r\n  }\r\n  get f() { return this.commentForm.controls; }\r\n\r\n\r\n  public commentFormValidation(){\r\n    this.submitted = true;\r\n\r\n    if (this.commentForm.invalid) {\r\n      return;\r\n    }\r\n    this.comment = this.commentForm.value.comment;\r\n    this.leaveComment();\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"quiz\">\r\n  <form [formGroup]=\"commentForm\" (ngSubmit)=\"commentFormValidation()\">\r\n<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\" *ngFor=\"let q of quiz.questions; index as iq\">\r\n  <mat-card class=\"example-card\" >\r\n    <mat-card-header>\r\n      <div mat-card-avatar class=\"example-header-image\"></div>\r\n      <mat-card-subtitle> Id {{q.id}} type {{q.type}}</mat-card-subtitle>\r\n      <mat-card-title >Question {{iq+1}}: {{q.text}}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div   *ngFor=\"let a of q.answers; index as ia\">\r\n      <div class=\"true-answer-div\" *ngIf=\"a.correct\">\r\n        {{ia+1}}) {{a.text}}\r\n      </div>\r\n        <div class=\"false-answer-div\" *ngIf=\"!a.correct\">\r\n            {{ia+1}}) {{a.text}}\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <div class=\"checkBox\">\r\n    <mat-checkbox [labelPosition]=\"labelPosition\" class=\"example-checkbox\" (change)=\"checkCount(q.id);\">Checked</mat-checkbox>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n<br><div fxLayout=\"column\">\r\n      <mat-accordion >\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header class=\"reject-comment\">\r\n            <mat-panel-title>\r\n              Reject\r\n            </mat-panel-title>\r\n            <mat-panel-description>\r\n              Leave a comment, why it was rejected\r\n            </mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n  <mat-form-field class=\"form-field\" fxLayout=\"column\" >\r\n    <textarea matInput row=\"5\" class=\"form-control\" formControlName=\"comment\"\r\n              placeholder=\"Comment\"></textarea>\r\n  </mat-form-field>\r\n          <div fxLayout=\"column\">\r\n  <button class = \"mat-button-send\"  mat-flat-button type=\"submit\">Send and reject</button>\r\n          </div>\r\n        </mat-expansion-panel>\r\n          </mat-accordion>\r\n    <button class = \"mat-button-active\" fxLayout=\"column\" mat-flat-button *ngIf=\"allChecked()\" (click)=\"activeQuiz()\">Approve</button>\r\n    </div>\r\n  </form>\r\n  <br>\r\n  <br>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Role} from '../../models/role.enum';\r\nimport {ShareIdService} from '../../service/profileService/share-id.service';\r\n\r\n@Component({\r\n  selector: 'app-quiz-check-nav',\r\n  templateUrl: './quiz-check-nav.component.html',\r\n  styleUrls: ['./quiz-check-nav.component.css']\r\n})\r\nexport class QuizCheckNavComponent implements OnInit {\r\n\r\n  currentQuiz = JSON.parse(localStorage.getItem('currentQuiz'));\r\n  id: any;\r\n  constructor() {\r\n    this.id = this.currentQuiz.id;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.currentQuiz.id;\r\n  }\r\n\r\n}\r\n","<nav mat-tab-nav-bar *ngIf=\"currentQuiz.id == id\">\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {quiznav: 'quizinfo'}}]\"\r\n     routerLinkActive #quizInfo=\"routerLinkActive\" [active]=\"quizInfo.isActive\">Quiz Info</a>\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {quiznav: 'qAnda'}}]\"\r\n     routerLinkActive #qAnda=\"routerLinkActive\" [active]=\"qAnda.isActive\">Content</a>\r\n</nav>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Quiz} from '../models/pending-quizzes.model';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {QuizService} from '../service/quizService/quiz.service';\r\nimport {Subscription} from 'rxjs';\r\nimport {ShareIdService} from '../service/profileService/share-id.service';\r\n\r\n@Component({\r\n  selector: 'app-quiz-check',\r\n  templateUrl: './quiz-check.component.html',\r\n  styleUrls: ['./quiz-check.component.css']\r\n})\r\nexport class QuizCheckComponent implements OnInit {\r\n  private subscription: Subscription;\r\n  id: string;\r\n  constructor(private activateRoute: ActivatedRoute,\r\n              private router: Router,\r\n              private shareId: ShareIdService) {\r\n    this.subscription = this.activateRoute.params.subscribe(\r\n      params => {\r\n        this.id = params.id;\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\" >\r\n  <div fxFlex=\"50\">\r\n    <div id=\"navigation\">\r\n      <app-quiz-check-nav ></app-quiz-check-nav>\r\n    </div>\r\n    <router-outlet name=\"quiznav\"></router-outlet>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Quiz} from '../../models/pending-quizzes.model';\r\nimport {Router} from '@angular/router';\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\nimport {PlatformLocation} from \"@angular/common\";\r\nimport {CommentHistory} from \"../../models/comment-history\";\r\nimport {QuizCheckService} from \"../../service/quizCheckService/quiz-check.service\";\r\n\r\n@Component({\r\n  selector: 'app-quiz-info',\r\n  templateUrl: './quiz-info.component.html',\r\n  styleUrls: ['./quiz-info.component.css']\r\n})\r\nexport class QuizInfoComponent implements OnInit {\r\n  public quiz: Quiz;\r\n  currentQuizId: string;\r\n  id: string;\r\n  public comments: CommentHistory[];\r\n\r\n  constructor(private quizService: QuizCheckService,\r\n              private shareId: ShareIdService,\r\n              private location: PlatformLocation,\r\n              private router: Router){\r\n    this.currentQuizId = JSON.parse(localStorage.getItem('currentQuiz')).id;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getQuiz(this.currentQuizId);\r\n    this.getCommentHistory();\r\n    this.location.onPopState(() => {\r\n      this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n        this.router.navigate(['checkquiz', this.currentQuizId, {outlets: {quiznav: 'quizinfo'}}]);\r\n      });\r\n    });\r\n  }\r\n  public getCommentHistory(){\r\n    this.quizService.getCommentHistory(this.currentQuizId).subscribe(\r\n      (resp: any) => {\r\n        this.comments = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert('Something wrong with downloading comment history');\r\n      }\r\n    );\r\n  }\r\n\r\n  ngSubmit(){}\r\n\r\n  public getQuiz(id: string){\r\n    this.quizService.getQuizInfoById(id).subscribe(\r\n      (resp: any) => {\r\n        this.quiz = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert('Something wrong with downloading quiz');\r\n      }\r\n    );\r\n  }\r\n  checkOut(id: number) {\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n}\r\n","<h2 align =\"center\"> Quiz info </h2>\r\n<div *ngIf=\"quiz\">\r\n  <div class=\"container\" >\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n      <mat-card class=\"info-card\" >\r\n        <mat-card-header>\r\n          <mat-card-title>{{quiz.name}}</mat-card-title>\r\n          <mat-card-subtitle>{{quiz.category}}</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n    <p>Author: {{quiz.authorName}} {{quiz.authorSurname}}</p>\r\n          <mat-divider></mat-divider>\r\n    <p>Date: {{quiz.date | date}}</p>\r\n          <mat-divider></mat-divider>\r\n    <p>Description: {{quiz.description}}</p>\r\n          <mat-divider></mat-divider>\r\n    <p>Status: {{quiz.status}}</p>\r\n          <mat-divider></mat-divider>\r\n    <p>Modification time: {{quiz.modificationTime | date}}</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n    <div *ngIf=\"comments\">\r\n      <h2 align=\"center\">Moderator`s comments history</h2>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\" *ngFor=\"let q of comments; index as i\">\r\n      <mat-card class=\"example-card\" >\r\n    <mat-card-header>\r\n      <mat-card-title> Quiz rejected by <a class=\"nav-link\" routerLink=\"\"\r\n                                           (click)=\"checkOut(q.moderatorId)\">\r\n        {{q.moderatorName}} {{q.moderatorSurname}}</a></mat-card-title>\r\n      <mat-card-subtitle>{{q.commentDate | date}}</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"comment-title\">\r\n        Moderator comment:\r\n      </div>\r\n      <div class=\"comment\">\r\n                  {{q.comment}}\r\n        </div>\r\n    </mat-card-content>\r\n      </mat-card>\r\n  </div>\r\n  </div>\r\n  </div>\r\n</div>\r\n","import { AuthenticationService } from './../../service/loginService/authentication.service';\r\nimport { Router } from '@angular/router';\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Quiz } from 'src/app/models/quiz';\r\n\r\n\r\nexport interface QuizDialogData {\r\n  quizData: Quiz;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-quiz-dialog',\r\n  templateUrl: './quiz-dialog.component.html',\r\n  styleUrls: ['./quiz-dialog.component.css']\r\n})\r\nexport class QuizDialogComponent implements OnInit {\r\n  isLogin: boolean;\r\n\r\n  constructor(public dialogRef: MatDialogRef<QuizDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: QuizDialogData,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isLogin = this.authenticationService.logIn;\r\n  }\r\n\r\n  onStartClick(): void {\r\n    this.router.navigate(['/game/settings', this.data.quizData.id]);\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div mat-dialog-content>\r\n    <img mat-card-image [src]=\"data.quizData.image\" alt=\"Photo of a Shiba Inu\">\r\n    <h2>{{data.quizData.name}}</h2>\r\n    <div>\r\n        <p class=\"header\">Category </p>\r\n        <p>{{data.quizData.category}}</p>\r\n    </div>\r\n    <div>\r\n        <p class=\"header\">Tags </p>\r\n        <mat-chip-list>\r\n            <mat-chip *ngFor=\"let tag of data.quizData.tags\">{{tag.name}}</mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <div>\r\n        <p class=\"header\">Description </p>\r\n        <p>{{data.quizData.description}}</p>\r\n    </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-flat-button (click)=\"onStartClick()\" color=\"accent\" *ngIf=\"isLogin\">Start Game</button>\r\n    <button mat-flat-button mat-dialog-close>Close</button>\r\n</div>\r\n","import { QuizDialogComponent } from './quiz-dialog/quiz-dialog.component';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { Quiz } from \"../models/quiz\";\r\nimport { DomSanitizer, SafeResourceUrl } from \"@angular/platform-browser\";\r\nimport { AuthenticationService } from \"../service/loginService/authentication.service\";\r\nimport { QuizService } from \"../service/quizService/quiz.service\";\r\nimport { CurrentUserService } from \"../service/current-user.service\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-quiz',\r\n  templateUrl: './quiz.component.html',\r\n  styleUrls: ['./quiz.component.css']\r\n})\r\nexport class QuizComponent implements OnInit {\r\n  @Input()\r\n  quizData: Quiz;\r\n  quizImage: SafeResourceUrl;\r\n\r\n  constructor(private sanitizer: DomSanitizer,\r\n    public authenticationService: AuthenticationService,\r\n    private quizService: QuizService,\r\n    private currentUserService: CurrentUserService,\r\n    public dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    this.quizImage = this.sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,' + this.quizData.image);\r\n  }\r\n\r\n  markQuizAsFavorite(): void {\r\n    this.quizService.markQuizAsFavorite(this.quizData.id, (this.currentUserService.getCurrentUser().id)).subscribe(\r\n      resp => {\r\n        this.quizData.favorite = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  unmarkQuizAsFavorite(): void {\r\n    this.quizService.unmarkQuizAsFavorite(this.quizData.id, (this.currentUserService.getCurrentUser().id)).subscribe(\r\n      resp => {\r\n        this.quizData.favorite = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  openDialog(): void {\r\n    this.dialog.open(QuizDialogComponent, {\r\n      width: '30em',\r\n      data: { quizData: this.quizData, quizImage: this.quizImage }\r\n    });\r\n  }\r\n}\r\n","<mat-card class=\"card\">\r\n  <mat-card-header class=\"head\">\r\n    <mat-card-title>{{quizData.name}}</mat-card-title>\r\n    <mat-card-subtitle>Category: {{quizData.category}}</mat-card-subtitle>\r\n    <div *ngIf=\"authenticationService.logIn\">\r\n      <button mat-icon-button *ngIf=\"quizData.favorite\" (click)=\"unmarkQuizAsFavorite()\">\r\n        <mat-icon>star</mat-icon>\r\n      </button>\r\n      <button mat-icon-button *ngIf=\"!quizData.favorite\" (click)=\"markQuizAsFavorite()\">\r\n        <mat-icon>star_border</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-card-header>\r\n  <img mat-card-image class=\"image\" [src]=quizData.image>\r\n  <mat-card-content>\r\n    <mat-chip-list>\r\n      <mat-chip *ngFor=\"let tag of quizData.tags\">{{tag.name}}</mat-chip>\r\n    </mat-chip-list>\r\n  </mat-card-content>\r\n  <mat-card-actions >\r\n    <button id=\"openButton\" [disableRipple]=\"true\" (click)=\"openDialog()\"  mat-button>OPEN</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Category} from \"../models/category.model\";\r\nimport {CategoryService} from \"../service/categoryService/category.service\";\r\nimport {Quiz} from \"../models/quiz\";\r\nimport {QuizService} from \"../service/quizService/quiz.service\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-quizzes-page',\r\n  templateUrl: './quizzes-page.component.html',\r\n  styleUrls: ['./quizzes-page.component.css']\r\n})\r\nexport class QuizzesPageComponent implements OnInit {\r\n  categories: Category[];\r\n  quizzes: Quiz[];\r\n  recommendationQuizzes: Quiz[];\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [10, 20, 30, 40, 50];\r\n  currentQuizCategory: number;\r\n  recommendationLimit: number = 20;\r\n\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n\r\n  constructor(private categoryService: CategoryService,\r\n              private quizService: QuizService,\r\n              public authService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.categoryService.getCategories().subscribe(\r\n      resp => this.categories = resp\r\n    );\r\n    this.setPaginationParamDefault();\r\n    this.getAllQuizzes();\r\n\r\n    this.authService.logIn ? this.getRecommendationForAuthUser(): this.getRecommendationForAnonimus();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        this.setPaginationParamDefault();\r\n        userSearch.length ==0 ? this.getAllQuizzes() : this.filterRequest(userSearch);\r\n      });\r\n  }\r\n\r\n  filterRequest(filterText: string) {\r\n    this.quizService.getFilteredQuizzes(filterText, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  onPageChanged(e) {\r\n    this.pageIndex = e.pageIndex;\r\n    this.pageSize = e.pageSize;\r\n    if (this.currentQuizCategory != undefined) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.searchByCategory(this.currentQuizCategory);\r\n    } else if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterRequest(this.userRequest);\r\n    } else {\r\n      this.getAllQuizzes();\r\n    }\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 10;\r\n  }\r\n\r\n  getAllQuizzes() {\r\n    console.log(\"pagesize \" + this.pageSize );\r\n    this.quizService.getQuizzes(this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.currentQuizCategory = undefined;\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  searchByCategory(categoryid: number) {\r\n    this.quizService.getQuizzesByCategory(categoryid, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  setCurrentCategory(categoryId: number) {\r\n    this.currentQuizCategory = categoryId;\r\n  }\r\n\r\n  getRecommendationForAuthUser() {\r\n    this.quizService.getRecommendedQuizzes(this.recommendationLimit).subscribe(\r\n      resp => {\r\n        this.recommendationQuizzes = resp;\r\n      });\r\n  }\r\n\r\n  getRecommendationForAnonimus() {\r\n    this.quizService.RecommendationForAnonimus(this.recommendationLimit).subscribe(\r\n      resp => {\r\n        this.recommendationQuizzes = resp;\r\n      });\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\">\r\n  <div fxFlex=\"15\" [class.mat-elevation-z24] = true>\r\n    <mat-divider></mat-divider>\r\n    <button mat-raised-button class=\"create_button\" routerLink=\"/new_quiz\">Create Quiz</button>\r\n    <mat-divider></mat-divider>\r\n    <h3 align=\"center\"><b>Categories</b></h3>\r\n    <button mat-raised-button (click)=\"setPaginationParamDefault(); getAllQuizzes();\">All</button>\r\n    <mat-selection-list>\r\n      <mat-list *ngFor=\"let category of categories\">\r\n        <mat-list-item>\r\n          <button mat-raised-button\r\n                  (click)=\"setPaginationParamDefault(); setCurrentCategory(category.id); onPageChanged($event); \">{{category.name}}</button>\r\n        </mat-list-item>\r\n      </mat-list>\r\n    </mat-selection-list>\r\n  </div>\r\n  <div #maincontent fxFlex=\"71\" class=\"scroll main\">\r\n    <div class=\"input\" >\r\n      <mat-form-field  appearance=\"outline\">\r\n        <mat-label>Search quiz</mat-label>\r\n        <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n               (ngModelChange)=\"this.userQuestionUpdate.next($event)\" >\r\n      </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" class=\"content\">\r\n      <div *ngFor=\"let quiz of quizzes\" fxLayout=\"row wrap\">\r\n        <app-quiz [quizData]=\"quiz\">\r\n        </app-quiz>\r\n      </div>\r\n    </div>\r\n    <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                   (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n    </mat-paginator>\r\n  </div>\r\n  <div fxFlex=\"14\" [class.mat-elevation-z24] = true>\r\n    <h3 id=\"recommended\" align=\"center\"><b>Recommended for you</b></h3>\r\n    <div class=\"scrollRec\">\r\n      <div *ngFor=\"let recomendedQuiz of recommendationQuizzes\" fxLayout=\"row wrap\">\r\n        <app-quiz [quizData]=\"recomendedQuiz\">\r\n        </app-quiz>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {RegistrationService} from '../service/registrationService/registration.service';\r\nimport {User} from '../models/user';\r\nimport {AuthenticationService} from '../service/loginService/authentication.service';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\n\r\nexport enum Gender{\r\n  MALE,\r\n  FEMALE,\r\n  NOT_MENTIONED\r\n}\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  public Gender = Gender;\r\n\r\n  model: User = {\r\n    image: undefined,\r\n    notificationStatus: undefined,\r\n    about: '',\r\n    birthdate: undefined,\r\n    city: \"\",\r\n    countryId: \"\",\r\n    gender: undefined,\r\n    name: \"\",\r\n    rating: \"\",\r\n    role: undefined,\r\n    surname: \"\",\r\n    id:null,\r\n    email:'',\r\n    password:''\r\n  };\r\n\r\n  constructor(\r\n    public service: RegistrationService,\r\n    public authService: AuthenticationService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router){\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      name: [''],\r\n      surname: [''],\r\n      gender: [Gender.NOT_MENTIONED],\r\n      birthdate: ['1973-01-01'],\r\n      city: [''],\r\n      about: [''],\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      confirmPassword: ['', Validators.required]\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    const input: User = JSON.parse(JSON.stringify(this.registerForm.value));\r\n    this.model.email = input.email;\r\n    this.model.password = input.password;\r\n    this.model.name = input.name;\r\n    this.model.surname = input.surname;\r\n    this.model.gender = input.gender;\r\n    this.model.birthdate = input.birthdate;\r\n    this.model.city = input.city;\r\n    this.model.about = input.about;\r\n    this.register();\r\n  }\r\n\r\n\r\n  register(): void{\r\n    this.service.postRegisterInfo(this.model).subscribe(\r\n      res =>{\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['/']);\r\n        });\r\n        alert(\"You registered\");\r\n      },\r\n      error => {\r\n        alert(error.error['message']);\r\n      }\r\n    );\r\n  }\r\n\r\n  get f() { return this.registerForm.controls; }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return;\r\n    }\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n\r\n","<div fxLayout=\"row\" class >\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"!authService.logIn\" >\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input  matInput formControlName=\"email\"  placeholder=\"Email\" name=\"email\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"/>\r\n        <mat-error *ngIf=\"f.email.errors?.required\">Email is required</mat-error>\r\n        <mat-error *ngIf=\"f.email.errors?.email\">Email must be a valid email address</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput formControlName=\"password\"  placeholder=\"Password\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" required/>\r\n        <mat-error *ngIf=\"f.password.errors?.required\">Password is require</mat-error>\r\n        <mat-error *ngIf=\"f.password.errors?.pattern\">Must contain at least 8 or more characters</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Confirm password</mat-label>\r\n        <input type=\"password\"  matInput  placeholder=\"Password\" formControlName=\"confirmPassword\"  name=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.mustMatch\">Passwords must match</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\">Register</button>\r\n      <div *ngIf=\"authService.logIn\">\r\n        <p>For registration you must be not logged in</p>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n","import { Achievement } from '../../models/achievement.model';\r\nimport { Category } from '../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AchievementsService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private GET_ACHIEVEMENTS = `${this.BASE_URL}\\\\achievements`;\r\n  private GET_ACHIEVEMENT_CATEGORIES = `${this.BASE_URL}\\\\achievements\\\\categories`;\r\n  private GET_ACHIEVEMENTS_BY_CATEGORY = `${this.BASE_URL}\\\\achievements\\\\by_category\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAchievements(): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS);\r\n  }\r\n\r\n  getAchievementCategories(): Observable<Category[]> {\r\n    return this.http.get<Category[]>(this.GET_ACHIEVEMENT_CATEGORIES);\r\n  }\r\n\r\n  getAchievementsByCategory(categoryId: number): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS_BY_CATEGORY + categoryId);\r\n  }\r\n\r\n  getAchievementsByUser(userId: number): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS + `\\\\` + userId);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {CurrentUserService} from \"../current-user.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnnouncementService {\n\n  private BASE_URL = window[\"configureApiBaseUrl\"];\n  private GET_ANNOUNCEMENT = `${this.BASE_URL}\\\\announce\\\\dash\\\\`;\n\n  constructor(private currentUserService: CurrentUserService,\n              private http: HttpClient) {\n  }\n\n\n  getAnnouncement(): Observable<any> {\n    return this.http.get(this.GET_ANNOUNCEMENT + \"?userId=\" + this.currentUserService.getCurrentUser().id)\n  }\n}\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport interface CanComponentDeactivate {\r\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CanDeactivateGuardService {\r\n\r\n  canDeactivate(component: CanComponentDeactivate,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState: RouterStateSnapshot) {\r\n    if (currentState.url.includes('/game/start') && nextState.url.includes('/game/question')) {\r\n      return true;\r\n    }\r\n\r\n    if (currentState.url.includes('/game/question') && (nextState.url.includes('/game/question') || nextState.url.includes('/game/finish'))) {\r\n      return true;\r\n    }\r\n\r\n    return component.canDeactivate ? component.canDeactivate() : true;\r\n  }\r\n}\r\n","import { Category } from './../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private CATEGORIES_URL = `${this.BASE_URL}\\\\categories`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCategories(): Observable<any> {\r\n    return this.http.get<Category[]>(this.CATEGORIES_URL);\r\n  }\r\n\r\n  getCategoryByName(name: String) {\r\n    return this.http.get(`${this.CATEGORIES_URL}\\\\${name}`);\r\n  }\r\n}\r\n","import { User } from './../models/user';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CurrentUserService {\r\n\r\n  constructor() { }\r\n\r\n  getCurrentUser(): User {\r\n    return JSON.parse(localStorage.getItem('currentUser'));\r\n  }\r\n}\r\n","import { Quiz } from './../../models/quiz.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private TOP_QUIZZES = `${this.BASE_URL}\\\\quizzes\\\\top_quizzes`;\r\n  private RECENT_QUIZZES = `${this.BASE_URL}\\\\quizzes\\\\recent_quizzes`;\r\n  private GET_RATING = `${this.BASE_URL}\\\\api\\\\users\\\\rating\\\\`;\r\n  private GET_ACHIEVEMENTS_TOTAL = `${this.BASE_URL}\\\\achievements\\\\count_total`;\r\n  private GET_ACHIEVEMENTS_FOR_USER = `${this.BASE_URL}\\\\achievements\\\\count\\\\`;\r\n  private GET_RECOMMENDATIONS = `${this.BASE_URL}\\\\quizzes\\\\recommendations\\\\`;\r\n  private GET_QUIZ_IMAGE = `${this.BASE_URL}\\\\quizzes\\\\get_image\\\\`;\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTopQuizzes(limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.TOP_QUIZZES + \"?limit=\" + limit);\r\n  }\r\n\r\n  getTopQuizzesByCategory(categoryId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.TOP_QUIZZES + '/' + categoryId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getRecentQuizzes(userId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.RECENT_QUIZZES + '/' + userId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getRating(userId: Number): Observable<number> {\r\n    return this.http.get<number>(this.GET_RATING + userId);\r\n  }\r\n\r\n  getAchievementsTotal(): Observable<number> {\r\n    return this.http.get<number>(this.GET_ACHIEVEMENTS_TOTAL);\r\n  }\r\n\r\n  getAchievementsForUser(userId: number): Observable<number> {\r\n    return this.http.get<number>(this.GET_ACHIEVEMENTS_FOR_USER + userId);\r\n  }\r\n\r\n  getRecommendations(userId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.GET_RECOMMENDATIONS + userId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getQuizImage(quizId: number): Observable<any> {\r\n    return this.http.get<any>(this.GET_QUIZ_IMAGE + quizId);\r\n  }\r\n}\r\n","import { GameStateService } from './../gameStateService/game-state.service';\r\nimport { Router } from '@angular/router';\r\nimport { Player } from './../../models/game.model';\r\nimport * as SockJs from 'sockjs-client';\r\n\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Game } from 'src/app/models/game.model';\r\nimport { Observable, ReplaySubject, of } from 'rxjs';\r\nimport { Answer } from 'src/app/models/answer.model';\r\nimport { map, take } from 'rxjs/operators';\r\nimport {RxStomp, RxStompConfig} from \"@stomp/rx-stomp\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GameService {\r\n  BASE_URL: string = window[\"configureApiBaseUrl\"];\r\n  CREATE_GAME: string = `${this.BASE_URL}\\\\play\\\\addSession`;\r\n  webSocketEndPoint: string = `${this.BASE_URL}\\\\ws`;\r\n  client: RxStomp;\r\n\r\n  gameObservable: Observable<string>;\r\n  gameId: number;\r\n  player: Player;\r\n\r\n  constructor(private http: HttpClient, private router: Router, private gameStateService: GameStateService) { }\r\n\r\n  createGame(game: Game): Observable<number> {\r\n    return this.http.post<number>(this.CREATE_GAME, game);\r\n  }\r\n\r\n  initializeWebSocketConnection(gameId: number, player: Player) {\r\n    this.gameId = gameId;\r\n    this.player = player;\r\n\r\n    const that = this;\r\n\r\n    const config = new RxStompConfig();\r\n    config.webSocketFactory = function () { return new SockJs(that.webSocketEndPoint); };\r\n\r\n    this.client = new RxStomp();\r\n    this.client.configure(config);\r\n\r\n    this.gameStateService.setGameState(this.gameId, false);\r\n\r\n    this.gameObservable = this.client.watch(`/play/game/${this.gameId}`).pipe(\r\n      map(resp => resp.body)\r\n    );\r\n  }\r\n\r\n  connect(): void {\r\n    this.client.activate();\r\n    this.client.publish({ destination: `/app/play/game/${this.gameId}/user`, body: JSON.stringify(this.player) });\r\n  }\r\n\r\n  waitGameStart(): Observable<string> {\r\n    return this.gameObservable;\r\n  }\r\n\r\n  subscribeQuestion() {\r\n    this.gameObservable.subscribe(\r\n      resp => {\r\n        let data = JSON.parse(resp);\r\n        if (data) {\r\n          if (data['question']) {\r\n            this.gameStateService.setGameState(this.gameId, true);\r\n            this.routeQuestion(data);\r\n          }\r\n          else {\r\n            if (this.gameStateService.getGameState(this.gameId)) {\r\n              this.routeResults();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  subscribeRating(): Observable<Player[]> {\r\n    return this.gameObservable.pipe(\r\n      map(resp => {\r\n        let data = JSON.parse(resp);\r\n        this.disconnect();\r\n        return data['players'];\r\n      })\r\n    );\r\n  }\r\n\r\n  startGame() {\r\n    this.client.publish({ destination: `/app/play/game/${this.gameId}/start` });\r\n  }\r\n\r\n  postAnswer(answers: Answer[]) {\r\n    this.client.publish({ destination: `/app/play/game/${this.gameId}/sendAnswer`, body: JSON.stringify({ answers: answers, player: this.player }) });\r\n  }\r\n\r\n  getQuestion(): Observable<string> {\r\n    return this.gameObservable;\r\n  }\r\n\r\n  routeQuestion(data: any) {\r\n    let link = `/game/question/${this.gameId}/${data['questionNumber']}`;\r\n    this.router.navigate([link],\r\n      {\r\n        state: {\r\n          questionNumber: data['questionNumber'],\r\n          question: data['question'],\r\n          questionTimer: data['questionTimer'],\r\n          player: this.player\r\n        }\r\n      });\r\n  }\r\n\r\n  routeResults() {\r\n    let link = `/game/finish/${this.gameId}`;\r\n    this.router.navigate([link]);\r\n  }\r\n\r\n  finishGame() {\r\n    this.client.publish({ destination: `/app/play/game/${this.gameId}/finish` });\r\n  }\r\n\r\n  manageGameState() {\r\n    if (!this.gameStateService.getGameState(this.gameId)) {\r\n      this.gameStateService.setGameState(this.gameId, true);\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    this.gameStateService.deleteGame(this.gameId);\r\n    this.client.deactivate();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GameStateService {\r\n\r\n  constructor() { }\r\n\r\n  setGameState(gameId: number, active: boolean) {\r\n    sessionStorage.setItem(gameId.toString(), String(active));\r\n  }\r\n\r\n  getGameState(gameId: number): boolean {\r\n    return JSON.parse(sessionStorage.getItem(gameId.toString()));\r\n  }\r\n\r\n  deleteGame(gameId: number) {\r\n    sessionStorage.removeItem(gameId.toString());\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private SAVE_IMAGE = `${this.BASE_URL}\\\\image`;\r\n\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  saveImage(image: File): Observable<any> {\r\n    if (image == null) {\r\n      return of(\"\");\r\n    }\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.SAVE_IMAGE, uploadImg, { responseType: 'text' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Router} from '@angular/router';\r\nimport {ShareIdService} from '../profileService/share-id.service';\r\nimport {CurrentUserService} from \"../current-user.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {User} from \"../../models/user\";\r\nimport {UserActive} from \"../../models/user-active\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private LOGIN_API_URL = `${this.BASE_URL}\\\\auth\\\\login`;\r\n  private USER_BY_CODE_URL = `${this.BASE_URL}\\\\api\\\\users\\\\activate\\\\`;\r\n  private SET_PASSWORD_URL = `${this.BASE_URL}\\\\profile\\\\updatePassword\\\\`;\r\n\r\n  constructor(private http: HttpClient,\r\n              private router: Router,\r\n              private shareId: ShareIdService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  login(email: string, password: string) {\r\n\r\n\r\n    this.http.post(this.LOGIN_API_URL, {email, password})\r\n        .subscribe((resp: any) => {\r\n              localStorage.setItem('currentUser', JSON.stringify(resp));\r\n              this.shareId.setId(JSON.parse(localStorage.getItem('currentUser')).id);\r\n              window.location.replace('/');\r\n            },\r\n            error => {\r\n              alert(error.error['message']);\r\n            });\r\n\r\n  }\r\n\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    window.location.replace('/dashboard');\r\n  }\r\n\r\n  public get logIn(): boolean {\r\n    return (localStorage.getItem('currentUser') != null);\r\n  }\r\n\r\n  getUserbyCode(code: string): Observable<User>{\r\n    return this.http.get<User>(this.USER_BY_CODE_URL + code);\r\n  }\r\n  setPassword(userId: string, newPassword: string): Observable<any>{\r\n    return this.http.post(this.SET_PASSWORD_URL + userId, newPassword);\r\n  }\r\n\r\n}\r\n","import { Quiz } from './../../models/add-quiz.model';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewQuizService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private NEW_QUIZ_URL = `${this.BASE_URL}\\\\quizzes\\\\new_quiz`;\r\n  private QUIZZES_INFO = `${this.BASE_URL}\\\\quizzes\\\\info\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postQuiz(quiz: Quiz): Observable<Quiz> {\r\n    return this.http.post<Quiz>(this.NEW_QUIZ_URL, quiz);\r\n  }\r\n\r\n  getQuizInfo(quizId: string): Observable<Quiz> {\r\n    return this.http.get<Quiz>(this.QUIZZES_INFO + quizId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {StatusType} from \"../../models/quiz.model\";\r\nimport {AuthenticationService} from \"../loginService/authentication.service\";\r\nimport {CurrentUserService} from \"../current-user.service\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PendingQuizzesService {\r\n\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private PENDING_QUIZZES_URL = `${this.BASE_URL}\\\\quizzes\\\\status\\\\`;\r\n  private ASSIGNED_QUIZZES_URL = `${this.BASE_URL}\\\\quizzes\\\\moderatorQuizzes\\\\`;\r\n  private GET_FILTERED_PENDING_QUIZZES_URL = `${this.BASE_URL}\\\\quizzes\\\\filter\\\\`;\r\n\r\n  constructor(private http: HttpClient,\r\n              private authService: AuthenticationService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  getPendingQuizzes(pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.PENDING_QUIZZES_URL + StatusType.PENDING + '/' + pageSize + '/' + pageIndex);\r\n  }\r\n\r\n\r\n  getAssignedQuizzes(moderatorId, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.ASSIGNED_QUIZZES_URL  + moderatorId + '/' + pageSize + '/' + pageIndex);\r\n  }\r\n\r\n\r\n  getFilteredPendingQuizzes(searchText: string, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_FILTERED_PENDING_QUIZZES_URL + searchText + '/' + pageSize + '/' + pageIndex );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {User} from '../../models/user';\r\nimport {Quiz} from '../../models/quiz';\r\nimport {NotificationStatus} from '../../models/notification-status.enum';\r\nimport {CurrentUserService} from \"../current-user.service\";\r\nimport {AuthenticationService} from \"../loginService/authentication.service\";\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private PROFILE_URL = `${this.BASE_URL}\\\\profile\\\\myprofile\\\\`;\r\n  private FRIEND_LIST_URL = `${this.BASE_URL}\\\\profile\\\\myfriends\\\\`;\r\n  private ADMIN_USERS_LIST_URL = `${this.BASE_URL}\\\\profile\\\\adminUsers`;\r\n  private UPDATE_PROFILE_URL = `${this.BASE_URL}\\\\profile\\\\myprofile\\\\update`;\r\n  private UPDATE_PASSWORD_URL = `${this.BASE_URL}\\\\profile\\\\updatePassword\\\\`;\r\n  private UPDATE_ACTIVE_STATUS_URL = `${this.BASE_URL}\\\\profile\\\\updateActive\\\\`;\r\n  private GET_QUIZZES_URL = `${this.BASE_URL}\\\\profile\\\\myquizzes\\\\`;\r\n  private GET_FAVORITE_URL = `${this.BASE_URL}\\\\profile\\\\myfavorite\\\\`;\r\n  private GET_CATEGORY_NAME = `${this.BASE_URL}\\\\profile\\\\category\\\\`;\r\n  private UPDATE_USER_IMAGE = `${this.BASE_URL}\\\\profile\\\\newicon\\\\`;\r\n  private GET_USER_IMAGE_BY_USER_ID = `${this.BASE_URL}\\\\profile\\\\getimage\\\\`;\r\n  private UPDATE_GET_NOTIFICATION = `${this.BASE_URL}\\\\profile\\\\status\\\\`;\r\n  private GET_PLAYED_GAMES = `${this.BASE_URL}\\\\profile\\\\played\\\\`;\r\n  private GET_GAME_RESULT = `${this.BASE_URL}\\\\profile\\\\gameresult\\\\`;\r\n  private DELETE_ADMIN_URL = `${this.BASE_URL}\\\\profile\\\\deleteAdminUser\\\\`;\r\n  private GET_FILTERED_USERS = `${this.BASE_URL}\\\\profile\\\\adminUsers\\\\filter\\\\`;\r\n  private GET_USERS_BY_ROLE = `${this.BASE_URL}\\\\profile\\\\roleStatus\\\\`;\r\n  private ADD_ADMIN_USER_URL = `${this.BASE_URL}\\\\api\\\\users\\\\addAdminUser`;\r\n  private GET_REJECTED_QUIZZES = `${this.BASE_URL}\\\\profile\\\\reject\\\\`;\r\n  private GET_REJECTED_MESSAGES = `${this.BASE_URL}\\\\profile\\\\rejectMessage\\\\`;\r\n  private ASSIGNED_QUIZZES_URL = `${this.BASE_URL}\\\\profile\\\\moderatorQuizzes\\\\`;\r\n  private userId = this.currentUserService.getCurrentUser().id;\r\n\r\n  constructor(private http: HttpClient,\r\n              private authService: AuthenticationService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  getProfile(userId: string): Observable<User> {\r\n    return this.http.get<User>(this.PROFILE_URL + userId);\r\n  }\r\n\r\n  updateProfile(user: User): Observable<User> {\r\n    user.id = this.userId;\r\n    return this.http.post<User>(this.UPDATE_PROFILE_URL, user);\r\n  }\r\n\r\n  updateAdminUser(user: User): Observable<User>{\r\n    return this.http.post<User>(this.UPDATE_PROFILE_URL, user);\r\n  }\r\n\r\n    deleteAdminUsers(id): Observable<User>{\r\n      return this.http.delete<User>(this.DELETE_ADMIN_URL + id);\r\n    }\r\n    updateActiveStatusUser(id): Observable<any>{\r\n      return this.http.post(this.UPDATE_ACTIVE_STATUS_URL + id, 'Change active status');\r\n    }\r\n\r\n  updatePassword(newPassword: string): Observable<any>{\r\n    return this.http.post(this.UPDATE_PASSWORD_URL + this.userId, newPassword);\r\n  }\r\n\r\n  getFriends(pageSize: number, pageNumber: number, sortDirection: any): Observable<any>{\r\n    return this.http.get<User[]>(this.FRIEND_LIST_URL + pageSize + '/' + pageNumber + '/' + this.userId + '?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));  //active direction\r\n  }\r\n\r\n  getUserQuizzes(pageSize: number, pageNumber: number, sortDirection: any): Observable<any>{\r\n    return this.http.get<Quiz[]>(this.GET_QUIZZES_URL + pageSize + '/' + pageNumber + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  getFavoriteGames(pageSize: number, pageNumber: number): Observable<any>{\r\n    return this.http.get<Quiz[]>(this.GET_FAVORITE_URL + this.userId + '/' + pageSize + '/' + pageNumber);\r\n  }\r\n  getAdminUsers(pageSize: number, pageIndex: number): Observable<any>{\r\n    if (!pageIndex){ pageIndex = 0;}\r\n    return this.http.get<User[]>(this.ADMIN_USERS_LIST_URL + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n  getUsersByRoleStatus(userRole: string, userStatus: string, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_USERS_BY_ROLE + userRole + '/' + userStatus + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  getFilteredUsers(searchText: string, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_FILTERED_USERS + searchText + '/' + pageSize + '/' + pageIndex);\r\n  }\r\n\r\n  getCategoryName(categoryId: string): Observable<any>{\r\n    return this.http.get(this.GET_CATEGORY_NAME + categoryId);\r\n  }\r\n\r\n  updateImage(image: File): Observable<any> {\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.UPDATE_USER_IMAGE + this.userId, uploadImg);\r\n  }\r\n\r\n  getProfileImage(id: string): Observable<any> {\r\n    return this.http.get(this.GET_USER_IMAGE_BY_USER_ID + id);\r\n  }\r\n\r\n  updateNotificationStatus(status: NotificationStatus): Observable<any> {\r\n    return this.http.post(this.UPDATE_GET_NOTIFICATION + this.userId, status);\r\n  }\r\n\r\n  getUserNotificationStatus(): Observable<NotificationStatus> {\r\n    return this.http.get<NotificationStatus>(this.UPDATE_GET_NOTIFICATION + this.userId);\r\n  }\r\n\r\n  filterFriendsRequest(userSearch: string, pageSize: number, pageIndex: number, sortDirection: any): Observable<any> {\r\n    return this.http.get(this.FRIEND_LIST_URL + userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  filterQuizzesRequest(userSearch: string, pageSize: number, pageIndex: number, sortDirection: any): Observable<any> {\r\n    return this.http.get(this.GET_QUIZZES_URL + userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  filterFavoriteRequest(userSearch: string, pageSize: number, pageIndex: number): Observable<any>{\r\n    return this.http.get(this.GET_QUIZZES_URL + userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId);\r\n  }\r\n\r\n  getPlayedGames(pageSize: number, pageIndex: number, sortDirection: any, userSearch?: string): Observable<any> {\r\n    console.log(userSearch);\r\n    return this.http.get(this.GET_PLAYED_GAMES  + pageSize + '/' + pageIndex + '/' + this.userId +\r\n      '?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction) + '&' +\r\n      'search=' + (userSearch==undefined? \"\": userSearch));\r\n  }\r\n\r\n  getGamesResult(gameId: number): Observable<any> {\r\n    return this.http.get(this.GET_GAME_RESULT + gameId);\r\n  }\r\n\r\n  postRegisterInfo(user: User): Observable<User> {\r\n    return this.http.post<User>(this.ADD_ADMIN_USER_URL, user);\r\n  }\r\n\r\n  getRejectedQuizzes(rejectedPageSize: number, rejectedPageIndex: number, rejectedSortDirection: any): Observable<any> {\r\n    return this.http.get(this.GET_REJECTED_QUIZZES + rejectedPageSize + '/' + rejectedPageIndex + '/' + this.userId +'?sort=' + (rejectedSortDirection==undefined? \"\": rejectedSortDirection.active + ' ' + rejectedSortDirection.direction));\r\n  }\r\n\r\n  getRejectMessages(quizId: number): Observable<any> {\r\n    return this.http.get(this.GET_REJECTED_MESSAGES + quizId);\r\n  }\r\n  getAssignedQuizzes(moderatorId): Observable<any> {\r\n    return this.http.get(this.ASSIGNED_QUIZZES_URL  + moderatorId);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShareIdService {\r\n  private id: string;\r\n  private email: string;\r\n  constructor() { }\r\n\r\n  public shareId(){\r\n    return this.id;\r\n  }\r\n\r\n  public setId(id: string){\r\n    this.id = id;\r\n  }\r\n\r\n  public shareEmail(){\r\n    return this.email;\r\n  }\r\n\r\n  public setEmail(email: string){\r\n    this.email = email;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Question } from 'src/app/models/question.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuestionService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private UPDATE_QUESTION_IMAGE = `${this.BASE_URL}\\\\quiz\\\\question\\\\new_image\\\\`;\r\n  private GET_QUESTIONS = `${this.BASE_URL}\\\\quiz\\\\question\\\\quiz\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  updateImage(questionId: number, image: File): Observable<any> {\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.UPDATE_QUESTION_IMAGE + questionId, uploadImg);\r\n  }\r\n\r\n  getQuestions(id: string): Observable<Question[]> {\r\n    console.log('service ' + this.http.get<Question[]>(this.GET_QUESTIONS + id));\r\n    return this.http.get<Question[]>(this.GET_QUESTIONS + id);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {ModeratorComment} from \"../../models/moderator-comment\";\r\nimport {QuizInfo} from \"../../models/quiz-info\";\r\nimport {StatusType} from \"../../models/status-type.enum\";\r\n\r\nclass QuizCheckModel {\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizCheckService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private QUIZZES_URL = `${this.BASE_URL}\\\\quizzes\\\\quizCheck\\\\`;\r\n  private UPDATE_QUIZ_STATUS_URL = `${this.BASE_URL}\\\\quizzes\\\\update\\\\status\\\\`;\r\n  private ADD_MODERATOR_COMMENT_URL = `${this.BASE_URL}\\\\quizzes\\\\addComment\\\\`;\r\n  private ASSIGN_QUIZ = `${this.BASE_URL}\\\\quizzes\\\\assignment\\\\`;\r\n  private UNSIGN_QUIZ_URL = `${this.BASE_URL}\\\\quizzes\\\\unsign\\\\`;\r\n  private GET_COMMENTS_URL = `${this.BASE_URL}\\\\quizzes\\\\comments\\\\`;\r\n  private QUIZZES_INFO_URL = `${this.BASE_URL}\\\\quizzes\\\\info\\\\`;\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getQuizById(id: string): Observable<QuizCheckModel>{\r\n    return this.http.get<QuizCheckModel>(this.QUIZZES_URL + id);\r\n  }\r\n\r\n  updateStatusQuiz(id, status: StatusType): Observable<any>{\r\n    return this.http.post(this.UPDATE_QUIZ_STATUS_URL + id, status);\r\n  }\r\n  addComment(comment: ModeratorComment): Observable<any>{\r\n    return this.http.post(this.ADD_MODERATOR_COMMENT_URL, comment);\r\n  }\r\n  assignQuiz(quizId, moderatorId): Observable<any> {\r\n    return this.http.post(this.ASSIGN_QUIZ + quizId, moderatorId);\r\n  }\r\n  unsignQuiz(currentQuizId: number) {\r\n    return this.http.delete(this.UNSIGN_QUIZ_URL + currentQuizId);\r\n  }\r\n  getCommentHistory(currentQuizId: string): Observable<any> {\r\n    return this.http.get(this.GET_COMMENTS_URL + currentQuizId);\r\n  }\r\n  getQuizInfoById(id: string){\r\n    return this.http.get<QuizInfo>(this.QUIZZES_INFO_URL + id);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable} from \"rxjs\";\r\nimport {Quiz} from \"../../models/quiz.model\";\r\nimport {AuthenticationService} from \"../loginService/authentication.service\";\r\nimport {CurrentUserService} from \"../current-user.service\";\r\nimport { QuizInfo } from \"../../models/quiz-info\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private QUIZZES_URL = `${this.BASE_URL}\\\\quizzes`;\r\n  private QUIZZES_INFO_URL = `${this.BASE_URL}\\\\quizzes\\\\info\\\\`;\r\n  private GET_QUIZ_BY_CATEGORY = `${this.QUIZZES_URL}\\\\categories\\\\`;\r\n  private GET_FILTERED_QUIZ = `${this.QUIZZES_URL}\\\\filter\\\\`;\r\n  private MARK_QUIZ_AS_FAVORITE = `${this.QUIZZES_URL}\\\\mark\\\\`;\r\n  private UNMARK_QUIZ_AS_FAVORITE = `${this.QUIZZES_URL}\\\\unmark\\\\`;\r\n  private GET_RECOMMENDED_QUIZZES = `${this.QUIZZES_URL}\\\\recommendations\\\\`;\r\n  private GET_POPULAR_QUIZZES = `${this.QUIZZES_URL}\\\\popular\\\\`;\r\n  private UNSIGN_ALL_MODERATOR_QUIZ_URL = `${this.QUIZZES_URL}\\\\unsignAll\\\\`;\r\n\r\n  constructor(private http: HttpClient,\r\n    private authService: AuthenticationService,\r\n    private currentUserService: CurrentUserService) { }\r\n\r\n  getQuizzes(pageSize: number, pageIndex: number): Observable<any> {\r\n    if (!pageIndex) { pageIndex = 0; }\r\n    return this.http.get<Quiz[]>(this.QUIZZES_URL + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn ? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  getQuizById(id: string) {\r\n    return this.http.get<Quiz>(this.QUIZZES_URL + id);\r\n  }\r\n\r\n  getQuizInfoById(id: string) {\r\n    return this.http.get<QuizInfo>(this.QUIZZES_INFO_URL + id);\r\n  }\r\n\r\n  getQuizzesByCategory(categoryId: number, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_QUIZ_BY_CATEGORY + categoryId + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn ? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  getFilteredQuizzes(searcText: string, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_FILTERED_QUIZ + searcText + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn ? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  markQuizAsFavorite(quizId: string, userId: string): Observable<any> {\r\n    return this.http.post(this.MARK_QUIZ_AS_FAVORITE + quizId + '/' + userId, \"\");\r\n  }\r\n\r\n  unmarkQuizAsFavorite(quizId: string, userId: string): Observable<any> {\r\n    return this.http.post(this.UNMARK_QUIZ_AS_FAVORITE + quizId + '/' + userId, \"\");\r\n  }\r\n\r\n  getRecommendedQuizzes(limit: number): Observable<any> {\r\n    return this.http.get<Quiz[]>(this.GET_RECOMMENDED_QUIZZES + this.currentUserService.getCurrentUser().id + '?limit=' + limit);\r\n  }\r\n\r\n  RecommendationForAnonimus(limit: number): Observable<any> {\r\n    return this.http.get<Quiz[]>(this.GET_POPULAR_QUIZZES + limit);\r\n  }\r\n  unsignAllQuiz(moderatorId: number) {\r\n    return this.http.delete(this.UNSIGN_ALL_MODERATOR_QUIZ_URL + moderatorId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RatingService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private GET_RATING = `${this.BASE_URL}\\\\api\\\\users\\\\rating`;\r\n  private GET_RATING_IN_RANGE = `${this.BASE_URL}\\\\api\\\\users\\\\rating\\\\range\\\\`;\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getRating(from: number, to: number): Observable<User[]> {\r\n    return this.http.get<User[]>(this.GET_RATING + \"?from=\" + from + \"&to=\" + to);\r\n  }\r\n\r\n  getRatingRange(userId: number, range: number): Observable<User[]> {\r\n    return this.http.get<User[]>(this.GET_RATING_IN_RANGE + userId + \"?range=\" + range);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {User} from '../../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegistrationService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private REGISTRATION_URL = `${this.BASE_URL}\\\\auth\\\\register`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postRegisterInfo(user: User): Observable<User> {\r\n    return this.http.post<User>(this.REGISTRATION_URL, user);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {ProfileService} from '../service/profileService/profile.service';\r\nimport {AuthenticationService} from '../service/loginService/authentication.service';\r\nimport {switchMap} from 'rxjs/operators';\r\nimport {UserActive} from '../models/user-active';\r\nimport {User} from \"../models/user\";\r\n\r\n@Component({\r\n  selector: 'app-set-password',\r\n  templateUrl: './set-password.component.html',\r\n  styleUrls: ['./set-password.component.css']\r\n})\r\nexport class SetPasswordComponent implements OnInit {\r\n  public changePasswordForm: FormGroup;\r\n  submitted = false;\r\n  newPassword: string;\r\n  code: string;\r\n  userId: number;\r\n  public user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private authService: AuthenticationService,\r\n              private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.pipe(\r\n      switchMap(params => params.getAll('code'))\r\n    )\r\n      .subscribe(data => this.code = data);\r\n    this.changePasswordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      confirmPassword: ['', Validators.required]\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n    if (localStorage.getItem('currentUser') !== null) {\r\n      this.logout();\r\n    }\r\n    this.getUser();\r\n  }\r\n  get f() { return this.changePasswordForm.controls; }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    window.location.replace('/activate/'  + this.code);\r\n  }\r\n\r\n  public changingPassFormValidation(){\r\n    this.submitted = true;\r\n\r\n    if (this.changePasswordForm.invalid) {\r\n      return;\r\n    }\r\n    this.newPassword = this.changePasswordForm.value.password;\r\n    this.setPassword();\r\n    window.location.replace('/login');\r\n  }\r\n\r\n  setPassword() {\r\n    this.authService.setPassword(this.user.id, this.newPassword).subscribe(\r\n      (resp: any) => {\r\n        alert('Password setted');\r\n      },\r\n      error => {\r\n        alert('Something wrong while save password');\r\n      }\r\n    );\r\n  }\r\n  getUser(){\r\n    this.authService.getUserbyCode(this.code).subscribe(\r\n      (resp: any) => {\r\n        this.user = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert('Something wrong with downloading user');\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n        return;\r\n      }\r\n\r\n      if (control.value !== matchingControl.value) {\r\n        matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n        matchingControl.setErrors(null);\r\n      }\r\n  };\r\n}\r\n\r\n","<div *ngIf=\"user\">\r\n<div fxLayout=\"row\" class >\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <h2>{{user.email}}</h2>\r\n    <form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"changingPassFormValidation()\">\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput formControlName=\"password\"  placeholder=\"Password\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" required/>\r\n        <mat-error *ngIf=\"f.password.errors?.required\">Password is require</mat-error>\r\n        <mat-error *ngIf=\"f.password.errors?.pattern\">Must contain at least 8 or more characters</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label> Confirm password</mat-label>\r\n        <input type=\"password\"  matInput  placeholder=\"Password\" formControlName=\"confirmPassword\"  name=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"f.confirmPassword.errors?.mustMatch\">Passwords must match</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\">Set password</button>\r\n\r\n    </form>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}